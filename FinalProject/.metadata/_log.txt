!SESSION 2016-08-02 12:10:45.567 -----------------------------------------------
eclipse.buildId=4.5.2.M20160212-1500
java.version=1.8.0_92
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -data C:\Users\Leo\Documents\group_0521\FinalProject -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2016-08-02 12:11:06.285
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Leo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.intro.universal 4 0 2016-08-02 12:13:48.974
!MESSAGE C:\Program Files\eclipse\introData.xml (系统找不到指定的文件。)
!STACK 0
java.io.FileNotFoundException: C:\Program Files\eclipse\introData.xml (系统找不到指定的文件。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(Unknown Source)
	at java.io.FileInputStream.<init>(Unknown Source)
	at java.io.FileInputStream.<init>(Unknown Source)
	at sun.net.www.protocol.file.FileURLConnection.connect(Unknown Source)
	at sun.net.www.protocol.file.FileURLConnection.getInputStream(Unknown Source)
	at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
	at com.sun.org.apache.xerces.internal.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(Unknown Source)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(Unknown Source)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(Unknown Source)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at javax.xml.parsers.DocumentBuilder.parse(Unknown Source)
	at org.eclipse.ui.internal.intro.universal.IntroData.parse(IntroData.java:159)
	at org.eclipse.ui.internal.intro.universal.IntroData.initialize(IntroData.java:63)
	at org.eclipse.ui.internal.intro.universal.IntroData.<init>(IntroData.java:47)
	at org.eclipse.ui.internal.intro.universal.CustomizationContentsArea.loadData(CustomizationContentsArea.java:630)
	at org.eclipse.ui.internal.intro.universal.CustomizationContentsArea.addPages(CustomizationContentsArea.java:495)
	at org.eclipse.ui.internal.intro.universal.CustomizationContentsArea.createContents(CustomizationContentsArea.java:459)
	at org.eclipse.ui.internal.intro.universal.CustomizationDialog.createDialogArea(CustomizationDialog.java:44)
	at org.eclipse.jface.dialogs.Dialog.createContents(Dialog.java:768)
	at org.eclipse.jface.window.Window.create(Window.java:430)
	at org.eclipse.jface.dialogs.Dialog.create(Dialog.java:1096)
	at org.eclipse.jface.window.Window.open(Window.java:792)
	at org.eclipse.ui.internal.intro.universal.CustomizeAction.run(CustomizeAction.java:35)
	at org.eclipse.ui.internal.intro.universal.CustomizeAction.run(CustomizeAction.java:29)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:473)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:595)
	at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:511)
	at org.eclipse.jface.action.ActionContributionItem$6.handleEvent(ActionContributionItem.java:462)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4362)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4180)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3769)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:694)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:606)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)

!ENTRY org.eclipse.recommenders.rcp 2 23 2016-08-02 20:03:06.815
!MESSAGE Failed to parse news feed
!STACK 0
java.net.UnknownHostException: www.codetrails.com
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
	at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
	at java.net.InetAddress.getAllByName0(Unknown Source)
	at java.net.InetAddress.getAllByName(Unknown Source)
	at java.net.InetAddress.getAllByName(Unknown Source)
	at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:44)
	at org.apache.http.impl.conn.HttpClientConnectionOperator.connect(HttpClientConnectionOperator.java:102)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:319)
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:363)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:219)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:195)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:86)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:108)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
	at org.apache.http.client.fluent.Executor.execute(Executor.java:206)
	at org.eclipse.recommenders.internal.rcp.news.CheckForProjectNewsJob.getRSSFeed(CheckForProjectNewsJob.java:138)
	at org.eclipse.recommenders.internal.rcp.news.CheckForProjectNewsJob.doRun(CheckForProjectNewsJob.java:89)
	at org.eclipse.recommenders.internal.rcp.news.CheckForProjectNewsJob.run(CheckForProjectNewsJob.java:62)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
!SESSION 2016-08-03 13:29:46.611 -----------------------------------------------
eclipse.buildId=4.5.2.M20160212-1500
java.version=1.8.0_92
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2016-08-03 13:30:02.370
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Leo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.recommenders.rcp 2 23 2016-08-04 14:34:50.717
!MESSAGE Failed to parse news feed
!STACK 0
java.net.UnknownHostException: www.codetrails.com
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
	at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
	at java.net.InetAddress.getAllByName0(Unknown Source)
	at java.net.InetAddress.getAllByName(Unknown Source)
	at java.net.InetAddress.getAllByName(Unknown Source)
	at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:44)
	at org.apache.http.impl.conn.HttpClientConnectionOperator.connect(HttpClientConnectionOperator.java:102)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:319)
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:363)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:219)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:195)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:86)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:108)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
	at org.apache.http.client.fluent.Executor.execute(Executor.java:206)
	at org.eclipse.recommenders.internal.rcp.news.CheckForProjectNewsJob.getRSSFeed(CheckForProjectNewsJob.java:138)
	at org.eclipse.recommenders.internal.rcp.news.CheckForProjectNewsJob.doRun(CheckForProjectNewsJob.java:89)
	at org.eclipse.recommenders.internal.rcp.news.CheckForProjectNewsJob.run(CheckForProjectNewsJob.java:62)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2016-08-05 12:00:20.721
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package finalproject;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.RootPaneContainer;

import com.sun.glass.events.MouseEvent;

import exercise2.EdgeExistsException;
import exercise2.Vertex;
import finalproject.ProjectV1.ShoppingCartItem;

/**
 * @author c6luoyil
 *
 */
public class Shop extends JFrame {
	private JMenuBar bar;
	private RegisterListener reglistener;
	private LoginListener loginlistener;
	private LogoutListener logoutlistener;
	private BrowseListener browselistener;
	private JMenu startMenu;
	private JButton browseButton;
	private JMenuItem registerItem, loginItem, logoutItem;
	private JLabel welcome;
	private static boolean loggedIn = false;
	private boolean loggedOut = true;
	private Map<Product, Integer> productList;
	private List<JLabel> tempProd;
	private Map<JButton, Product> tempButton;
	private static boolean inShoppingCart = false;
	private User cur_user;
	private static boolean validUser = false;
	private ArrayList<JLabel> labels;
	JButton shoppingcart;
	JButton checkout;
	JButton info;
	JButton history;
	JButton addCategory;
	JButton addProduct;
	JButton addWarehouse;
	JButton maintainQuantity;
	JButton addRoute;
	JButton salesReport;
	JButton refresh;
	

	private JPanel panel;
	// private JScrollPane panel;
	protected ProjectV1 p;
	protected int sessionID;

	public Shop() throws IOException {
		super("Shopping App");
		setContentPane(new JLabel(new ImageIcon("Products/bg.jpg")));
		setLayout(new FlowLayout());

		p = new ProjectV1();
		panel = new JPanel();

		// JScrollPane panel = new JScrollPane(this,
		// JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
		// JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		welcome = new JLabel();
		welcome.setFont(new Font("Sanserif", Font.ITALIC, 10));
		welcome.setEnabled(false);
		productList = new HashMap<Product, Integer>();
		tempButton = new HashMap<JButton, Product>();
		tempProd = new ArrayList<>();
		addProducts();

		bar = new JMenuBar();
		setJMenuBar(bar);
		startMenu = new JMenu("Start");
		bar.add(startMenu);

		registerItem = new JMenuItem("Register");
		// registerItem.setMnemonic('I');
		startMenu.add(registerItem);
		reglistener = new RegisterListener();
		registerItem.addActionListener(reglistener);

		loginItem = new JMenuItem("Log In");
		// loginItem.setMnemonic('I');
		startMenu.add(loginItem);
		loginlistener = new LoginListener();
		loginItem.addActionListener(loginlistener);

		logoutItem = new JMenuItem("Log Out");
		// logoutItem.setMnemonic(KeyEvent.VK_T);
		logoutItem.setEnabled(false);
		logoutlistener = new LogoutListener();
		logoutItem.addActionListener(logoutlistener);
		startMenu.add(logoutItem);

		browseButton = new JButton("Browse");
		bar.add(browseButton);
		browselistener = new BrowseListener();
		browseButton.addActionListener(browselistener);
		
		shoppingcart = new JButton("Shopping Cart");
		checkout = new JButton("CheckOut");
		info = new JButton("Personal information");
		history = new JButton("History of Purchase");
		bar.add(checkout);
		bar.add(shoppingcart);
		bar.add(info);
		bar.add(history);
		
		
		addCategory = new JButton("Add category");
		 addProduct = new JButton("Add Product");
		addWarehouse = new JButton("Add WareHouse");
		maintainQuantity = new JButton("Maintain Product Quantities");
		addRoute = new JButton("Add Shipping route");
		salesReport = new JButton("SalesReport");
		bar.add(addCategory);
		bar.add(addProduct);
		bar.add(salesReport);
		bar.add(addRoute);
		bar.add(maintainQuantity);
		bar.add(addWarehouse);

		labels = new ArrayList();
		this.setSize(600, 400);
		this.setVisible(true);
		
		addCategory.setVisible(false);
		addProduct.setVisible(false);
		salesReport.setVisible(false);
		addRoute.setVisible(false);
		maintainQuantity.setVisible(false);
		addWarehouse.setVisible(false);
		checkout.setVisible(false);
		shoppingcart.setVisible(false);
		info.setVisible(false);
		history.setVisible(false);
	}

	private void addProducts() {
		List<Product> products = p.inv.allProduct();
		for (Product p : products) {
			productList.put(p, p.quantity);
		}
		drawProductImage(productList);
	}

	// need to do
	private class LoginListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			try {
				User u = isAuthenticated();
				if (u != null) {
					loggedIn = true;
					loginItem.setEnabled(false);
					logoutItem.setEnabled(true);
					bar.add(add(Box.createHorizontalGlue()));
					bar.add(welcome);
					for (JLabel l : tempProd)
						l.setToolTipText("Add to shopping cart!");
					revalidate();
					if (u.type.equals("Shopper")) {
						ShopperFrame(u);
					} else {
						AdminFrame(u);
					}

				}
			} catch (NumberFormatException | OutOfStockException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private class LogoutListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			if (cur_user != null) {
				try {
					p.logout(cur_user.sessionID);
					cur_user = null;
					loginItem.setEnabled(true);
					logoutItem.setEnabled(false);
					addCategory.setVisible(false);
					addProduct.setVisible(false);
					salesReport.setVisible(false);
					addRoute.setVisible(false);
					maintainQuantity.setVisible(false);
					addWarehouse.setVisible(false);
					checkout.setVisible(false);
					shoppingcart.setVisible(false);
					info.setVisible(false);
					history.setVisible(false);
					
					refresh();
					validUser = false;
					validate();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	public void refresh() {
		panel.removeAll();
		welcome.setText("");
		addProducts();
		revalidate();
	}

	class RegisterListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			JTextField username = new JTextField();
			JTextField password = new JPasswordField();
			JTextField check = new JTextField();
			Object[] message = { "Username:", username, "Password:", password, "Are you Admin? (Yes or No)", check };
			int option = JOptionPane.showConfirmDialog(null, message, "Register", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (username.getText().equals("") || password.equals(""))
					JOptionPane.showMessageDialog(null, "Please input username and password.");
				if (check.getText().equals("Yes")) {
					try {
						boolean x = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								true);
						if (!x)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else if (check.getText().equals("No")) {
					try {
						boolean y = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								false);
						if (!y)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					JOptionPane.showMessageDialog(null, "Please input 'Yes' or 'No' for 'Are you Admin?'");
				}
			}
		}
	}

	public void drawProductImage(Map<Product, Integer> prodList) {
		//labels.clear();
		JLabel prod;
		//tempProd.clear();
		for (Map.Entry<Product, Integer> item : prodList.entrySet()) {
			Product p = item.getKey();
			ImageIcon prodImage = new ImageIcon(p.image);
			prod = new JLabel();
			JButton temp = new JButton();
			temp.setIcon(prodImage);
			temp.addActionListener(new ButtonAction());
			//labels.add(prod);
			// prod.setText("Quantity: ");
			// prod.setHorizontalTextPosition(JLabel.CENTER);
			// prod.setVerticalTextPosition(JLabel.BOTTOM);
			// prod.add(temp);
			panel.add(temp);
			add(panel);
			tempProd.add(prod);
			tempButton.put(temp, p);
		}
	}

	class BrowseListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			int min;
			int max;
			JTextField category = new JTextField();
			JTextField maxp = new JTextField();
			JTextField minp = new JTextField();
			Object[] message = { "Category:", category, "Min Price:", minp, "Max price:", maxp };
			int option = JOptionPane.showConfirmDialog(null, message, "Search", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (category.getText().equals("") || minp.equals("") || maxp.equals(""))
					JOptionPane.showMessageDialog(null, "Please fill in information!");
				try {
					min = Integer.parseInt(minp.getText());
					max = Integer.parseInt(maxp.getText());
					if (min >= 0) {
						tempProd.clear();
						ArrayList<Product> browsed = User.browseMerchandise(p.inv, category.getText(), max, min);
						Map<Product, Integer> prodList = new HashMap<Product, Integer>();
						for (Product p : browsed) {
							prodList.put(p, p.quantity);
						}
						panel.removeAll();
						drawProductImage(prodList);
						revalidate();
					}
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(null, "Please fill in Number for Price!");
					// not an integer!
				}
			}
		}
	}

	private User isAuthenticated() throws NumberFormatException, OutOfStockException, IOException {
		JTextField username = new JTextField();
		JTextField password = new JPasswordField();
		Object[] message = { "Username:", username, "Password:", password };
		// boolean result = true;
		User result = null;
		int sessionID;
		int option = JOptionPane.showConfirmDialog(null, message, "Login", JOptionPane.OK_CANCEL_OPTION);
		if (option == JOptionPane.OK_OPTION) {

			if (username.getText().equals("") || password.equals(""))
				JOptionPane.showMessageDialog(null, "Please input username and password.");

			sessionID = p.login(username.getText(), new String(((JPasswordField) password).getPassword()));
			if (sessionID != -1) {
				
				welcome.setText("Welcome, " + username.getText() + "!  ");
				this.sessionID = sessionID;
				result = User.allUser.get(sessionID);
			} else {
				JOptionPane.showMessageDialog(null, "Wrong Password/Username");
				// result = false;
			}
		}
		return result;
	}

	public boolean hasLoggedOut() {
		return loggedOut;
	}

	public void ShopperFrame(User u) {
		validUser = true;
		Shopper s = (Shopper) u;
		cur_user = s;
		checkout.setVisible(true);
		shoppingcart.setVisible(true);
		info.setVisible(true);
		history.setVisible(true);


		shoppingcart.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				Map<Product, Integer> cart = s.getShoppingCart();
				ShoppingCartFrame sf = new ShoppingCartFrame(cart, s);
				for (JLabel l : tempProd)
					l.setToolTipText("The item is in your shopping cart");

			}

		});

		history.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				OrderReport o = new OrderReport(s);
			}
			
		});

		checkout.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (s.address != null){
					if (p.customer.containsKey(s.address.ID)){
						try {
							if (s.cart.size()!=0){
								int orderID = p.checkout(s.address.ID, s.sessionID);
								if (orderID != 0){
									JOptionPane.showMessageDialog(null, "Thank you. You have checked out.");
									JOptionPane.showMessageDialog(null, Order.orderList.get(orderID).toString());
								}
								else
									JOptionPane.showMessageDialog(null, "Check out failed.");
							}
							else
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					else{
						JOptionPane.showMessageDialog(null, "Customer information not added");
					}
				}
				else{
					JOptionPane.showMessageDialog(null, "Customer information not added");
				}

			}

		});

		info.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JTextField name = new JTextField();
				JTextField city = new JTextField();
				JTextField street = new JTextField();
				Object[] message = { "Name:", name, "Street:", street, "City:", city, };
				int option = JOptionPane.showConfirmDialog(null, message, "Personal Information",
						JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (name.getText().equals("") || city.getText().equals("") || street.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Please fill in information!");
					} else {
						int success = p.addCustomer(name.getText(), city.getText(), street.getText(), sessionID);
						if (success == -1)
							JOptionPane.showMessageDialog(null, "Data already exists");
						else
							JOptionPane.showMessageDialog(null, "Thank You!");
					}
				}
			}

		});

	}

	public static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch (NumberFormatException e) {
			return false;
		} catch (NullPointerException e) {
			return false;
		}
		// only got here if we didn't return false
		return true;
	}

	class ButtonAction implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			JButton pressed = (JButton) e.getSource();
			Product p = null;
			for (Map.Entry<JButton, Product> item : tempButton.entrySet()) {
				if (pressed.equals(item.getKey())) {
					p = item.getValue();
				}
			}
			if (p != null) {
				if (validUser != true) {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
				} else {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
					String str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
					int option = JOptionPane.showConfirmDialog(null, str+"Amount added to Shopping Cart", "Add to Cart", JOptionPane.OK_CANCEL_OPTION);
					if (option == JOptionPane.OK_OPTION) {
						if (!isInteger(str)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
						boolean result = ((Shopper) cur_user).addtoCart(p, Integer.parseInt(str));
						if (!result) {
							JOptionPane.showMessageDialog(null,
									"The available amount is not sufficient for your order!");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
					}
				}

			}
		}

	}

	/**
	 * New frame just for the shopper's shopping cart
	 * 
	 * @author JLAI
	 *
	 */
	public class ShoppingCartFrame extends JFrame {
		JPanel pan;
		public Map<Product, Integer> cart;
		public Map<JButton, Product> ShoppingCarttempButton;
		public Shopper s;

		public ShoppingCartFrame(Map<Product, Integer> cart, Shopper s) {
			this.cart = cart;
			this.s = s;
			pan = new JPanel();
			ShoppingCarttempButton = new HashMap<JButton, Product>();
			drawProductImage2(cart);
			this.setSize(600, 400);
			this.setVisible(true);
		}

		public void drawProductImage2(Map<Product, Integer> prodList) {
			JLabel prod2;
			//tempProd.clear();
			for (HashMap.Entry<Product, Integer> item : prodList.entrySet()) {
				Product p = item.getKey();
				ImageIcon prodImage = new ImageIcon(p.image);
				JButton temp = new JButton();
				prod2 = new JLabel();
				temp.setIcon(prodImage);
				temp.addActionListener(new Action());
				prod2.add(temp);
				prod2.setToolTipText("Product: "+ p.description + " Price: " + p.price + " Available Quantity: " + p.quantity);
				// prod.setText("Quantity: ");
				// prod.setHorizontalTextPosition(JLabel.CENTER);
				// prod.setVerticalTextPosition(JLabel.BOTTOM);
				// prod.add(temp);
				pan.add(temp);
				add(pan);
				ShoppingCarttempButton.put(temp, p);		
			}
			revalidate();
		}

		class Action implements ActionListener {

			@Override
			public void actionPerformed(ActionEvent e) {
				JButton press = (JButton) e.getSource();
				Product p1 = null;
				for (Map.Entry<JButton, Product> item : ShoppingCarttempButton.entrySet()) {
					if (press.equals(item.getKey())) {
						p1 = item.getValue();
					}
				}
				if (p1 != null) {
					JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + cart.get(p1) +"\n");
					String st = JOptionPane.showInputDialog("Remove item or Update Quantity (Type R or U)");
					if (st.equals("R")) {
						s.removeFromCart(p1);
						JOptionPane.showMessageDialog(null, "Item has been removed from the cart");
					}
					else if (st.equals("U")) {
						st = JOptionPane.showInputDialog("Type in your desired Quantity");
						if (!isInteger(st)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							st = JOptionPane.showInputDialog("Type in your desired Quantity");
						}
						else{
							int num = Integer.parseInt(st);
							num = num - cart.get(p1);
							s.addtoCart(p1, num);
							JOptionPane.showMessageDialog(null, "Desired Quantity has been updated.");
							JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + num+ "\n");
						}
					} else {
						JOptionPane.showMessageDialog(null, "Wrong Input!!!");
						st = JOptionPane.showInputDialog("Remove Product or Update Quantity (Type R or U)");
					}
				}
			}
		}
	}

	public void AdminFrame(User u) {
		Administrator admin = (Administrator) u;
		cur_user = admin;
		validUser = false;

		addCategory.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField catName = new JTextField();
				Object[] message = { "Category name:", catName};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Category", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION){
					String result = catName.getText();
					try {
						int num = p.addCategory(result, admin.sessionID);
						if (num == -1){
							JOptionPane.showMessageDialog(null, "Category is already existed or the input is invalid.");
						}
						else
							JOptionPane.showMessageDialog(null, "New Category has been added.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		});

		addProduct.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prodname = new JTextField();
				JTextField category = new JTextField();
				JTextField price = new JTextField();
				JTextField imgpath = new JTextField();
				Object[] message = { "Product name:", prodname, "Category:", category, "Price:", price , "Image Path:", imgpath};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (category.getText().equals("") || prodname.getText().equals("") || price.getText().equals("") || imgpath.getText().equals("") 
							|| !isInteger(price.getText())) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
						}
					else{
						int result;
						try {
							int code = p.inv.findID(category.getText());
							if (code != -1) {
								result = p.addProduct(prodname.getText(), code, Double.parseDouble(price.getText()), admin.sessionID);}
							else { result = code; }
							if (result == -1){
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
							else{
								p.inv.findProduct(result).image = imgpath.getText();
								p.inventoryManager.writeFile(p.inv);
								JOptionPane.showMessageDialog(null, "Product has been added");
								refresh();
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
			}
			}
		});

		addRoute.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField cityA = new JTextField();
				JTextField cityB = new JTextField();
				JTextField distance = new JTextField();
				Object[] message = { "City A:", cityA, "City B:", cityB, "Distance:", distance };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (cityA.getText().equals("") || cityB.equals("") || distance.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							p.addRoute(cityA.getText(), cityB.getText(), Integer.parseInt(distance.getText()), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New route added.");
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (EdgeExistsException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The Route already existed.");
						}
					}
			}
		}
	});
		
		maintainQuantity.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prod = new JTextField();
				JTextField distCentre = new JTextField();
				JTextField quantity = new JTextField();
				Object[] message = { "Product Name", prod, "Distribution Centre:", distCentre, "Quantity", quantity };
				int option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (prod.getText().equals("") || distCentre.equals("") || quantity.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							int prodID = p.inv.findProductID(prod.getText());
							boolean flag = p.updateQuantity(prodID, distCentre.getText(), Integer.parseInt(quantity.getText()), admin.sessionID);
							if (flag){
								JOptionPane.showMessageDialog(null, "Product has been updated");
							}
							else{
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null, "Invalid Input");
						}
					}
			}
		}
	});

		// Method to check whether this city exists
		addWarehouse.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField city = new JTextField();
				Object[] message = { "City:", city };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (city.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse",
								JOptionPane.OK_CANCEL_OPTION);
					} else {
						try {
							p.addDistributionCenter(city.getText(), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New Warehouse added.(the warehouse may exist before added)");
						}catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}catch (CityDNEException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The city do not exist.");
						}

					}
				}
			}
		});
		
		salesReport.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				SalesReport s = new SalesReport(admin,p.inv);
			}
			
		});

		// Generate sales report method

		revalidate();
		addCategory.setVisible(true);
		addProduct.setVisible(true);
		salesReport.setVisible(true);
		addRoute.setVisible(true);
		maintainQuantity.setVisible(true);
		addWarehouse.setVisible(true);

		// private void mouseClicked(MouseEvent e){
		// for (JLabel image: tempProd){
		// if (e.getSource() == image){

		// }
		// }
		// }

	}
	
	public class SalesReport extends JFrame{
		private JLabel label;
		private JPanel panell;
		private Administrator admin;
		private Inventory inv;
		public SalesReport(Administrator admin, Inventory inv){
			this.admin = admin;
			this.inv = inv;
			panell = new JPanel();
			HashMap<Product, Integer> result = this.admin.salesReport(this.inv);
//			String message = "";
			label = new JLabel("======Sales Report===== \n");
			panell.add(label);
			for (HashMap.Entry<Product,Integer> cart : result.entrySet()){
				String message = "";
				message += "Product ID: " + cart.getKey().ID;
				message += "  Product Name: " + cart.getKey().description;
				message += "  Quantity: " + cart.getValue();
				message += "  Total: " + cart.getKey().price * cart.getValue();
  				message += "================== \n";
				label = new JLabel(message);
				panell.add(label);
			}
//		label = new JLabel(message);
	//		panell.add(label);
			add(panell);
			this.setSize(600, 400);
			this.setVisible(true);
		}
	}
	
	public class OrderReport extends JFrame{
		private JLabel lab;
		private JPanel pane2;
		private Shopper shopper;
		public OrderReport(Shopper shopper){
			this.shopper = shopper;
			pane2 = new JPanel();
			for (Invoice i : shopper.invoice){
				String result = "";
				result += "Invoice: " + i.iToString();
				lab = new JLabel(result);
				pane2.add(lab);
			}
			add(pane2);
			this.setSize(600, 400);
			this.setVisible(true);
			}

		}
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2016-08-05 12:00:20.739
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2016-08-05 12:00:20.739
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2016-08-05 12:00:20.772
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package finalproject;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.RootPaneContainer;

import com.sun.glass.events.MouseEvent;

import exercise2.EdgeExistsException;
import exercise2.Vertex;
import finalproject.ProjectV1.ShoppingCartItem;

/**
 * @author c6luoyil
 *
 */
public class Shop extends JFrame {
	private JMenuBar bar;
	private RegisterListener reglistener;
	private LoginListener loginlistener;
	private LogoutListener logoutlistener;
	private BrowseListener browselistener;
	private JMenu startMenu;
	private JButton browseButton;
	private JMenuItem registerItem, loginItem, logoutItem;
	private JLabel welcome;
	private static boolean loggedIn = false;
	private boolean loggedOut = true;
	private Map<Product, Integer> productList;
	private List<JLabel> tempProd;
	private Map<JButton, Product> tempButton;
	private static boolean inShoppingCart = false;
	private User cur_user;
	private static boolean validUser = false;
	private ArrayList<JLabel> labels;
	JButton shoppingcart;
	JButton checkout;
	JButton info;
	JButton history;
	JButton addCategory;
	JButton addProduct;
	JButton addWarehouse;
	JButton maintainQuantity;
	JButton addRoute;
	JButton salesReport;
	JButton refresh;
	

	private JPanel panel;
	// private JScrollPane panel;
	protected ProjectV1 p;
	protected int sessionID;

	public Shop() throws IOException {
		super("Shopping App");
		setContentPane(new JLabel(new ImageIcon("Products/bg.jpg")));
		setLayout(new FlowLayout());

		p = new ProjectV1();
		panel = new JPanel();

		// JScrollPane panel = new JScrollPane(this,
		// JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
		// JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		welcome = new JLabel();
		welcome.setFont(new Font("Sanserif", Font.ITALIC, 10));
		welcome.setEnabled(false);
		productList = new HashMap<Product, Integer>();
		tempButton = new HashMap<JButton, Product>();
		tempProd = new ArrayList<>();
		addProducts();

		bar = new JMenuBar();
		setJMenuBar(bar);
		startMenu = new JMenu("Start");
		bar.add(startMenu);

		registerItem = new JMenuItem("Register");
		// registerItem.setMnemonic('I');
		startMenu.add(registerItem);
		reglistener = new RegisterListener();
		registerItem.addActionListener(reglistener);

		loginItem = new JMenuItem("Log In");
		// loginItem.setMnemonic('I');
		startMenu.add(loginItem);
		loginlistener = new LoginListener();
		loginItem.addActionListener(loginlistener);

		logoutItem = new JMenuItem("Log Out");
		// logoutItem.setMnemonic(KeyEvent.VK_T);
		logoutItem.setEnabled(false);
		logoutlistener = new LogoutListener();
		logoutItem.addActionListener(logoutlistener);
		startMenu.add(logoutItem);

		browseButton = new JButton("Browse");
		bar.add(browseButton);
		browselistener = new BrowseListener();
		browseButton.addActionListener(browselistener);
		
		shoppingcart = new JButton("Shopping Cart");
		checkout = new JButton("CheckOut");
		info = new JButton("Personal information");
		history = new JButton("History of Purchase");
		bar.add(checkout);
		bar.add(shoppingcart);
		bar.add(info);
		bar.add(history);
		
		
		addCategory = new JButton("Add category");
		 addProduct = new JButton("Add Product");
		addWarehouse = new JButton("Add WareHouse");
		maintainQuantity = new JButton("Maintain Product Quantities");
		addRoute = new JButton("Add Shipping route");
		salesReport = new JButton("SalesReport");
		bar.add(addCategory);
		bar.add(addProduct);
		bar.add(salesReport);
		bar.add(addRoute);
		bar.add(maintainQuantity);
		bar.add(addWarehouse);

		labels = new ArrayList();
		this.setSize(600, 400);
		this.setVisible(true);
		
		addCategory.setVisible(false);
		addProduct.setVisible(false);
		salesReport.setVisible(false);
		addRoute.setVisible(false);
		maintainQuantity.setVisible(false);
		addWarehouse.setVisible(false);
		checkout.setVisible(false);
		shoppingcart.setVisible(false);
		info.setVisible(false);
		history.setVisible(false);
	}

	private void addProducts() {
		List<Product> products = p.inv.allProduct();
		for (Product p : products) {
			productList.put(p, p.quantity);
		}
		drawProductImage(productList);
	}

	// need to do
	private class LoginListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			try {
				User u = isAuthenticated();
				if (u != null) {
					loggedIn = true;
					loginItem.setEnabled(false);
					logoutItem.setEnabled(true);
					bar.add(add(Box.createHorizontalGlue()));
					bar.add(welcome);
					for (JLabel l : tempProd)
						l.setToolTipText("Add to shopping cart!");
					revalidate();
					if (u.type.equals("Shopper")) {
						ShopperFrame(u);
					} else {
						AdminFrame(u);
					}

				}
			} catch (NumberFormatException | OutOfStockException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private class LogoutListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			if (cur_user != null) {
				try {
					p.logout(cur_user.sessionID);
					cur_user = null;
					loginItem.setEnabled(true);
					logoutItem.setEnabled(false);
					addCategory.setVisible(false);
					addProduct.setVisible(false);
					salesReport.setVisible(false);
					addRoute.setVisible(false);
					maintainQuantity.setVisible(false);
					addWarehouse.setVisible(false);
					checkout.setVisible(false);
					shoppingcart.setVisible(false);
					info.setVisible(false);
					history.setVisible(false);
					
					refresh();
					validUser = false;
					validate();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	public void refresh() {
		panel.removeAll();
		welcome.setText("");
		addProducts();
		revalidate();
	}

	class RegisterListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			JTextField username = new JTextField();
			JTextField password = new JPasswordField();
			JTextField check = new JTextField();
			Object[] message = { "Username:", username, "Password:", password, "Are you Admin? (Yes or No)", check };
			int option = JOptionPane.showConfirmDialog(null, message, "Register", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (username.getText().equals("") || password.equals(""))
					JOptionPane.showMessageDialog(null, "Please input username and password.");
				if (check.getText().equals("Yes")) {
					try {
						boolean x = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								true);
						if (!x)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else if (check.getText().equals("No")) {
					try {
						boolean y = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								false);
						if (!y)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					JOptionPane.showMessageDialog(null, "Please input 'Yes' or 'No' for 'Are you Admin?'");
				}
			}
		}
	}

	public void drawProductImage(Map<Product, Integer> prodList) {
		//labels.clear();
		JLabel prod;
		//tempProd.clear();
		for (Map.Entry<Product, Integer> item : prodList.entrySet()) {
			Product p = item.getKey();
			ImageIcon prodImage = new ImageIcon(p.image);
			prod = new JLabel();
			JButton temp = new JButton();
			temp.setIcon(prodImage);
			temp.addActionListener(new ButtonAction());
			//labels.add(prod);
			// prod.setText("Quantity: ");
			// prod.setHorizontalTextPosition(JLabel.CENTER);
			// prod.setVerticalTextPosition(JLabel.BOTTOM);
			// prod.add(temp);
			panel.add(temp);
			add(panel);
			tempProd.add(prod);
			tempButton.put(temp, p);
		}
	}

	class BrowseListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			int min;
			int max;
			JTextField category = new JTextField();
			JTextField maxp = new JTextField();
			JTextField minp = new JTextField();
			Object[] message = { "Category:", category, "Min Price:", minp, "Max price:", maxp };
			int option = JOptionPane.showConfirmDialog(null, message, "Search", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (category.getText().equals("") || minp.equals("") || maxp.equals(""))
					JOptionPane.showMessageDialog(null, "Please fill in information!");
				try {
					min = Integer.parseInt(minp.getText());
					max = Integer.parseInt(maxp.getText());
					if (min >= 0) {
						tempProd.clear();
						ArrayList<Product> browsed = User.browseMerchandise(p.inv, category.getText(), max, min);
						Map<Product, Integer> prodList = new HashMap<Product, Integer>();
						for (Product p : browsed) {
							prodList.put(p, p.quantity);
						}
						panel.removeAll();
						drawProductImage(prodList);
						revalidate();
					}
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(null, "Please fill in Number for Price!");
					// not an integer!
				}
			}
		}
	}

	private User isAuthenticated() throws NumberFormatException, OutOfStockException, IOException {
		JTextField username = new JTextField();
		JTextField password = new JPasswordField();
		Object[] message = { "Username:", username, "Password:", password };
		// boolean result = true;
		User result = null;
		int sessionID;
		int option = JOptionPane.showConfirmDialog(null, message, "Login", JOptionPane.OK_CANCEL_OPTION);
		if (option == JOptionPane.OK_OPTION) {

			if (username.getText().equals("") || password.equals(""))
				JOptionPane.showMessageDialog(null, "Please input username and password.");

			sessionID = p.login(username.getText(), new String(((JPasswordField) password).getPassword()));
			if (sessionID != -1) {
				
				welcome.setText("Welcome, " + username.getText() + "!  ");
				this.sessionID = sessionID;
				result = User.allUser.get(sessionID);
			} else {
				JOptionPane.showMessageDialog(null, "Wrong Password/Username");
				// result = false;
			}
		}
		return result;
	}

	public boolean hasLoggedOut() {
		return loggedOut;
	}

	public void ShopperFrame(User u) {
		validUser = true;
		Shopper s = (Shopper) u;
		cur_user = s;
		checkout.setVisible(true);
		shoppingcart.setVisible(true);
		info.setVisible(true);
		history.setVisible(true);


		shoppingcart.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				Map<Product, Integer> cart = s.getShoppingCart();
				ShoppingCartFrame sf = new ShoppingCartFrame(cart, s);
				for (JLabel l : tempProd)
					l.setToolTipText("The item is in your shopping cart");

			}

		});

		history.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				OrderReport o = new OrderReport(s);
			}
			
		});

		checkout.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (s.address != null){
					if (p.customer.containsKey(s.address.ID)){
						try {
							if (s.cart.size()!=0){
								int orderID = p.checkout(s.address.ID, s.sessionID);
								if (orderID != 0){
									JOptionPane.showMessageDialog(null, "Thank you. You have checked out.");
									JOptionPane.showMessageDialog(null, Order.orderList.get(orderID).toString());
								}
								else
									JOptionPane.showMessageDialog(null, "Check out failed.");
							}
							else
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					else{
						JOptionPane.showMessageDialog(null, "Customer information not added");
					}
				}
				else{
					JOptionPane.showMessageDialog(null, "Customer information not added");
				}

			}

		});

		info.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JTextField name = new JTextField();
				JTextField city = new JTextField();
				JTextField street = new JTextField();
				Object[] message = { "Name:", name, "Street:", street, "City:", city, };
				int option = JOptionPane.showConfirmDialog(null, message, "Personal Information",
						JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (name.getText().equals("") || city.getText().equals("") || street.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Please fill in information!");
					} else {
						int success = p.addCustomer(name.getText(), city.getText(), street.getText(), sessionID);
						if (success == -1)
							JOptionPane.showMessageDialog(null, "Data already exists");
						else
							JOptionPane.showMessageDialog(null, "Thank You!");
					}
				}
			}

		});

	}

	public static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch (NumberFormatException e) {
			return false;
		} catch (NullPointerException e) {
			return false;
		}
		// only got here if we didn't return false
		return true;
	}

	class ButtonAction implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			JButton pressed = (JButton) e.getSource();
			Product p = null;
			for (Map.Entry<JButton, Product> item : tempButton.entrySet()) {
				if (pressed.equals(item.getKey())) {
					p = item.getValue();
				}
			}
			if (p != null) {
				if (validUser != true) {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
				} else {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
					String str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
					int option = JOptionPane.showConfirmDialog(null, str+"Amount added to Shopping Cart", "Add to Cart", JOptionPane.OK_CANCEL_OPTION);
					if (option == JOptionPane.OK_OPTION) {
						if (!isInteger(str)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
						boolean result = ((Shopper) cur_user).addtoCart(p, Integer.parseInt(str));
						if (!result) {
							JOptionPane.showMessageDialog(null,
									"The available amount is not sufficient for your order!");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
					}
				}

			}
		}

	}

	/**
	 * New frame just for the shopper's shopping cart
	 * 
	 * @author JLAI
	 *
	 */
	public class ShoppingCartFrame extends JFrame {
		JPanel pan;
		public Map<Product, Integer> cart;
		public Map<JButton, Product> ShoppingCarttempButton;
		public Shopper s;

		public ShoppingCartFrame(Map<Product, Integer> cart, Shopper s) {
			this.cart = cart;
			this.s = s;
			pan = new JPanel();
			ShoppingCarttempButton = new HashMap<JButton, Product>();
			drawProductImage2(cart);
			this.setSize(600, 400);
			this.setVisible(true);
		}

		public void drawProductImage2(Map<Product, Integer> prodList) {
			JLabel prod2;
			//tempProd.clear();
			for (HashMap.Entry<Product, Integer> item : prodList.entrySet()) {
				Product p = item.getKey();
				ImageIcon prodImage = new ImageIcon(p.image);
				JButton temp = new JButton();
				prod2 = new JLabel();
				temp.setIcon(prodImage);
				temp.addActionListener(new Action());
				prod2.add(temp);
				prod2.setToolTipText("Product: "+ p.description + " Price: " + p.price + " Available Quantity: " + p.quantity);
				// prod.setText("Quantity: ");
				// prod.setHorizontalTextPosition(JLabel.CENTER);
				// prod.setVerticalTextPosition(JLabel.BOTTOM);
				// prod.add(temp);
				pan.add(temp);
				add(pan);
				ShoppingCarttempButton.put(temp, p);		
			}
			revalidate();
		}

		class Action implements ActionListener {

			@Override
			public void actionPerformed(ActionEvent e) {
				JButton press = (JButton) e.getSource();
				Product p1 = null;
				for (Map.Entry<JButton, Product> item : ShoppingCarttempButton.entrySet()) {
					if (press.equals(item.getKey())) {
						p1 = item.getValue();
					}
				}
				if (p1 != null) {
					JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + cart.get(p1) +"\n");
					String st = JOptionPane.showInputDialog("Remove item or Update Quantity (Type R or U)");
					if (st.equals("R")) {
						s.removeFromCart(p1);
						JOptionPane.showMessageDialog(null, "Item has been removed from the cart");
					}
					else if (st.equals("U")) {
						st = JOptionPane.showInputDialog("Type in your desired Quantity");
						if (!isInteger(st)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							st = JOptionPane.showInputDialog("Type in your desired Quantity");
						}
						else{
							int num = Integer.parseInt(st);
							num = num - cart.get(p1);
							s.addtoCart(p1, num);
							JOptionPane.showMessageDialog(null, "Desired Quantity has been updated.");
							JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + num+ "\n");
						}
					} else {
						JOptionPane.showMessageDialog(null, "Wrong Input!!!");
						st = JOptionPane.showInputDialog("Remove Product or Update Quantity (Type R or U)");
					}
				}
			}
		}
	}

	public void AdminFrame(User u) {
		Administrator admin = (Administrator) u;
		cur_user = admin;
		validUser = false;

		addCategory.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField catName = new JTextField();
				Object[] message = { "Category name:", catName};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Category", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION){
					String result = catName.getText();
					try {
						int num = p.addCategory(result, admin.sessionID);
						if (num == -1){
							JOptionPane.showMessageDialog(null, "Category is already existed or the input is invalid.");
						}
						else
							JOptionPane.showMessageDialog(null, "New Category has been added.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		});

		addProduct.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prodname = new JTextField();
				JTextField category = new JTextField();
				JTextField price = new JTextField();
				JTextField imgpath = new JTextField();
				Object[] message = { "Product name:", prodname, "Category:", category, "Price:", price , "Image Path:", imgpath};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (category.getText().equals("") || prodname.getText().equals("") || price.getText().equals("") || imgpath.getText().equals("") 
							|| !isInteger(price.getText())) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
						}
					else{
						int result;
						try {
							int code = p.inv.findID(category.getText());
							if (code != -1) {
								result = p.addProduct(prodname.getText(), code, Double.parseDouble(price.getText()), admin.sessionID);}
							else { result = code; }
							if (result == -1){
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
							else{
								p.inv.findProduct(result).image = imgpath.getText();
								p.inventoryManager.writeFile(p.inv);
								JOptionPane.showMessageDialog(null, "Product has been added");
								refresh();
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
			}
			}
		});

		addRoute.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField cityA = new JTextField();
				JTextField cityB = new JTextField();
				JTextField distance = new JTextField();
				Object[] message = { "City A:", cityA, "City B:", cityB, "Distance:", distance };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (cityA.getText().equals("") || cityB.equals("") || distance.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							p.addRoute(cityA.getText(), cityB.getText(), Integer.parseInt(distance.getText()), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New route added.");
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (EdgeExistsException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The Route already existed.");
						}
					}
			}
		}
	});
		
		maintainQuantity.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prod = new JTextField();
				JTextField distCentre = new JTextField();
				JTextField quantity = new JTextField();
				Object[] message = { "Product Name", prod, "Distribution Centre:", distCentre, "Quantity", quantity };
				int option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (prod.getText().equals("") || distCentre.equals("") || quantity.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							int prodID = p.inv.findProductID(prod.getText());
							boolean flag = p.updateQuantity(prodID, distCentre.getText(), Integer.parseInt(quantity.getText()), admin.sessionID);
							if (flag){
								JOptionPane.showMessageDialog(null, "Product has been updated");
							}
							else{
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null, "Invalid Input");
						}
					}
			}
		}
	});

		// Method to check whether this city exists
		addWarehouse.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField city = new JTextField();
				Object[] message = { "City:", city };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (city.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse",
								JOptionPane.OK_CANCEL_OPTION);
					} else {
						try {
							p.addDistributionCenter(city.getText(), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New Warehouse added.(the warehouse may exist before added)");
						}catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}catch (CityDNEException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The city do not exist.");
						}

					}
				}
			}
		});
		
		salesReport.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				SalesReport s = new SalesReport(admin,p.inv);
			}
			
		});

		// Generate sales report method

		revalidate();
		addCategory.setVisible(true);
		addProduct.setVisible(true);
		salesReport.setVisible(true);
		addRoute.setVisible(true);
		maintainQuantity.setVisible(true);
		addWarehouse.setVisible(true);

		// private void mouseClicked(MouseEvent e){
		// for (JLabel image: tempProd){
		// if (e.getSource() == image){

		// }
		// }
		// }

	}
	
	public class SalesReport extends JFrame{
		private JLabel label;
		private JPanel panell;
		private Administrator admin;
		private Inventory inv;
		public SalesReport(Administrator admin, Inventory inv){
			this.admin = admin;
			this.inv = inv;
			panell = new JPanel();
			HashMap<Product, Integer> result = this.admin.salesReport(this.inv);
//			String message = "";
			label = new JLabel("======Sales Report===== \n");
			panell.add(label);
			for (HashMap.Entry<Product,Integer> cart : result.entrySet()){
				String message = "";
				message += "Product ID: " + cart.getKey().ID;
				message += "  Product Name: " + cart.getKey().description;
				message += "  Quantity: " + cart.getValue();
				message += "  Total: " + cart.getKey().price * cart.getValue();
  				message += "================== \n";
				label = new JLabel(message);
				panell.add(label);
			}
//		label = new JLabel(message);
	//		panell.add(label);
			add(panell);
			this.setSize(600, 400);
			this.setVisible(true);
		}
	}
	
	public class OrderReport extends JFrame{
		private JLabel lab;
		private JPanel pane2;
		private Shopper shopper;
		public OrderReport(Shopper shopper){
			this.shopper = shopper;
			pane2 = new JPanel();
			for (Invoice i : shopper.invoice){
				String result = "";
				result += "Invoice: " + i.iToString();
				lab = new JLabel(result);
				pane2.add(lab);
			}
			add(pane2);
			this.setSize(600, 400);
			this.setVisible(true);
			}

		}
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:461)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2016-08-05 12:00:20.774
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:461)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2016-08-05 12:00:20.776
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:461)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2016-08-05 12:00:24.261
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package finalproject;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.RootPaneContainer;

import com.sun.glass.events.MouseEvent;

import exercise2.EdgeExistsException;
import exercise2.Vertex;
import finalproject.ProjectV1.ShoppingCartItem;

/**
 * @author c6luoyil
 *
 */
public class Shop extends JFrame {
	private JMenuBar bar;
	private RegisterListener reglistener;
	private LoginListener loginlistener;
	private LogoutListener logoutlistener;
	private BrowseListener browselistener;
	private JMenu startMenu;
	private JButton browseButton;
	private JMenuItem registerItem, loginItem, logoutItem;
	private JLabel welcome;
	private static boolean loggedIn = false;
	private boolean loggedOut = true;
	private Map<Product, Integer> productList;
	private List<JLabel> tempProd;
	private Map<JButton, Product> tempButton;
	private static boolean inShoppingCart = false;
	private User cur_user;
	private static boolean validUser = false;
	private ArrayList<JLabel> labels;
	JButton shoppingcart;
	JButton checkout;
	JButton info;
	JButton history;
	JButton addCategory;
	JButton addProduct;
	JButton addWarehouse;
	JButton maintainQuantity;
	JButton addRoute;
	JButton salesReport;
	JButton refresh;
	

	private JPanel panel;
	// private JScrollPane panel;
	protected ProjectV1 p;
	protected int sessionID;

	public Shop() throws IOException {
		super("Shopping App");
		setContentPane(new JLabel(new ImageIcon("Products/bg.jpg")));
		setLayout(new FlowLayout());

		p = new ProjectV1();
		panel = new JPanel();

		// JScrollPane panel = new JScrollPane(this,
		// JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
		// JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		welcome = new JLabel();
		welcome.setFont(new Font("Sanserif", Font.ITALIC, 10));
		welcome.setEnabled(false);
		productList = new HashMap<Product, Integer>();
		tempButton = new HashMap<JButton, Product>();
		tempProd = new ArrayList<>();
		addProducts();

		bar = new JMenuBar();
		setJMenuBar(bar);
		startMenu = new JMenu("Start");
		bar.add(startMenu);

		registerItem = new JMenuItem("Register");
		// registerItem.setMnemonic('I');
		startMenu.add(registerItem);
		reglistener = new RegisterListener();
		registerItem.addActionListener(reglistener);

		loginItem = new JMenuItem("Log In");
		// loginItem.setMnemonic('I');
		startMenu.add(loginItem);
		loginlistener = new LoginListener();
		loginItem.addActionListener(loginlistener);

		logoutItem = new JMenuItem("Log Out");
		// logoutItem.setMnemonic(KeyEvent.VK_T);
		logoutItem.setEnabled(false);
		logoutlistener = new LogoutListener();
		logoutItem.addActionListener(logoutlistener);
		startMenu.add(logoutItem);

		browseButton = new JButton("Browse");
		bar.add(browseButton);
		browselistener = new BrowseListener();
		browseButton.addActionListener(browselistener);
		
		shoppingcart = new JButton("Shopping Cart");
		checkout = new JButton("CheckOut");
		info = new JButton("Personal information");
		history = new JButton("History of Purchase");
		bar.add(checkout);
		bar.add(shoppingcart);
		bar.add(info);
		bar.add(history);
		
		
		addCategory = new JButton("Add category");
		 addProduct = new JButton("Add Product");
		addWarehouse = new JButton("Add WareHouse");
		maintainQuantity = new JButton("Maintain Product Quantities");
		addRoute = new JButton("Add Shipping route");
		salesReport = new JButton("SalesReport");
		bar.add(addCategory);
		bar.add(addProduct);
		bar.add(salesReport);
		bar.add(addRoute);
		bar.add(maintainQuantity);
		bar.add(addWarehouse);

		labels = new ArrayList();
		this.setSize(600, 400);
		this.setVisible(true);
		
		addCategory.setVisible(false);
		addProduct.setVisible(false);
		salesReport.setVisible(false);
		addRoute.setVisible(false);
		maintainQuantity.setVisible(false);
		addWarehouse.setVisible(false);
		checkout.setVisible(false);
		shoppingcart.setVisible(false);
		info.setVisible(false);
		history.setVisible(false);
	}

	private void addProducts() {
		List<Product> products = p.inv.allProduct();
		for (Product p : products) {
			productList.put(p, p.quantity);
		}
		drawProductImage(productList);
	}

	// need to do
	private class LoginListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			try {
				User u = isAuthenticated();
				if (u != null) {
					loggedIn = true;
					loginItem.setEnabled(false);
					logoutItem.setEnabled(true);
					bar.add(add(Box.createHorizontalGlue()));
					bar.add(welcome);
					for (JLabel l : tempProd)
						l.setToolTipText("Add to shopping cart!");
					revalidate();
					if (u.type.equals("Shopper")) {
						ShopperFrame(u);
					} else {
						AdminFrame(u);
					}

				}
			} catch (NumberFormatException | OutOfStockException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private class LogoutListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			if (cur_user != null) {
				try {
					p.logout(cur_user.sessionID);
					cur_user = null;
					loginItem.setEnabled(true);
					logoutItem.setEnabled(false);
					addCategory.setVisible(false);
					addProduct.setVisible(false);
					salesReport.setVisible(false);
					addRoute.setVisible(false);
					maintainQuantity.setVisible(false);
					addWarehouse.setVisible(false);
					checkout.setVisible(false);
					shoppingcart.setVisible(false);
					info.setVisible(false);
					history.setVisible(false);
					
					refresh();
					validUser = false;
					validate();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	public void refresh() {
		panel.removeAll();
		welcome.setText("");
		addProducts();
		revalidate();
	}

	class RegisterListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			JTextField username = new JTextField();
			JTextField password = new JPasswordField();
			JTextField check = new JTextField();
			Object[] message = { "Username:", username, "Password:", password, "Are you Admin? (Yes or No)", check };
			int option = JOptionPane.showConfirmDialog(null, message, "Register", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (username.getText().equals("") || password.equals(""))
					JOptionPane.showMessageDialog(null, "Please input username and password.");
				if (check.getText().equals("Yes")) {
					try {
						boolean x = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								true);
						if (!x)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else if (check.getText().equals("No")) {
					try {
						boolean y = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								false);
						if (!y)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					JOptionPane.showMessageDialog(null, "Please input 'Yes' or 'No' for 'Are you Admin?'");
				}
			}
		}
	}

	public void drawProductImage(Map<Product, Integer> prodList) {
		//labels.clear();
		JLabel prod;
		//tempProd.clear();
		for (Map.Entry<Product, Integer> item : prodList.entrySet()) {
			Product p = item.getKey();
			ImageIcon prodImage = new ImageIcon(p.image);
			prod = new JLabel();
			JButton temp = new JButton();
			temp.setIcon(prodImage);
			temp.addActionListener(new ButtonAction());
			//labels.add(prod);
			// prod.setText("Quantity: ");
			// prod.setHorizontalTextPosition(JLabel.CENTER);
			// prod.setVerticalTextPosition(JLabel.BOTTOM);
			// prod.add(temp);
			panel.add(temp);
			add(panel);
			tempProd.add(prod);
			tempButton.put(temp, p);
		}
	}

	class BrowseListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			int min;
			int max;
			JTextField category = new JTextField();
			JTextField maxp = new JTextField();
			JTextField minp = new JTextField();
			Object[] message = { "Category:", category, "Min Price:", minp, "Max price:", maxp };
			int option = JOptionPane.showConfirmDialog(null, message, "Search", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (category.getText().equals("") || minp.equals("") || maxp.equals(""))
					JOptionPane.showMessageDialog(null, "Please fill in information!");
				try {
					min = Integer.parseInt(minp.getText());
					max = Integer.parseInt(maxp.getText());
					if (min >= 0) {
						tempProd.clear();
						ArrayList<Product> browsed = User.browseMerchandise(p.inv, category.getText(), max, min);
						Map<Product, Integer> prodList = new HashMap<Product, Integer>();
						for (Product p : browsed) {
							prodList.put(p, p.quantity);
						}
						panel.removeAll();
						drawProductImage(prodList);
						revalidate();
					}
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(null, "Please fill in Number for Price!");
					// not an integer!
				}
			}
		}
	}

	private User isAuthenticated() throws NumberFormatException, OutOfStockException, IOException {
		JTextField username = new JTextField();
		JTextField password = new JPasswordField();
		Object[] message = { "Username:", username, "Password:", password };
		// boolean result = true;
		User result = null;
		int sessionID;
		int option = JOptionPane.showConfirmDialog(null, message, "Login", JOptionPane.OK_CANCEL_OPTION);
		if (option == JOptionPane.OK_OPTION) {

			if (username.getText().equals("") || password.equals(""))
				JOptionPane.showMessageDialog(null, "Please input username and password.");

			sessionID = p.login(username.getText(), new String(((JPasswordField) password).getPassword()));
			if (sessionID != -1) {
				
				welcome.setText("Welcome, " + username.getText() + "!  ");
				this.sessionID = sessionID;
				result = User.allUser.get(sessionID);
			} else {
				JOptionPane.showMessageDialog(null, "Wrong Password/Username");
				// result = false;
			}
		}
		return result;
	}

	public boolean hasLoggedOut() {
		return loggedOut;
	}

	public void ShopperFrame(User u) {
		validUser = true;
		Shopper s = (Shopper) u;
		cur_user = s;
		checkout.setVisible(true);
		shoppingcart.setVisible(true);
		info.setVisible(true);
		history.setVisible(true);


		shoppingcart.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				Map<Product, Integer> cart = s.getShoppingCart();
				ShoppingCartFrame sf = new ShoppingCartFrame(cart, s);
				for (JLabel l : tempProd)
					l.setToolTipText("The item is in your shopping cart");

			}

		});

		history.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				OrderReport o = new OrderReport(s);
			}
			
		});

		checkout.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (s.address != null){
					if (p.customer.containsKey(s.address.ID)){
						try {
							if (s.cart.size()!=0){
								int orderID = p.checkout(s.address.ID, s.sessionID);
								if (orderID != 0){
									JOptionPane.showMessageDialog(null, "Thank you. You have checked out.");
									JOptionPane.showMessageDialog(null, Order.orderList.get(orderID).toString());
								}
								else
									JOptionPane.showMessageDialog(null, "Check out failed.");
							}
							else
								
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					else{
						JOptionPane.showMessageDialog(null, "Customer information not added");
					}
				}
				else{
					JOptionPane.showMessageDialog(null, "Customer information not added");
				}

			}

		});

		info.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JTextField name = new JTextField();
				JTextField city = new JTextField();
				JTextField street = new JTextField();
				Object[] message = { "Name:", name, "Street:", street, "City:", city, };
				int option = JOptionPane.showConfirmDialog(null, message, "Personal Information",
						JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (name.getText().equals("") || city.getText().equals("") || street.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Please fill in information!");
					} else {
						int success = p.addCustomer(name.getText(), city.getText(), street.getText(), sessionID);
						if (success == -1)
							JOptionPane.showMessageDialog(null, "Data already exists");
						else
							JOptionPane.showMessageDialog(null, "Thank You!");
					}
				}
			}

		});

	}

	public static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch (NumberFormatException e) {
			return false;
		} catch (NullPointerException e) {
			return false;
		}
		// only got here if we didn't return false
		return true;
	}

	class ButtonAction implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			JButton pressed = (JButton) e.getSource();
			Product p = null;
			for (Map.Entry<JButton, Product> item : tempButton.entrySet()) {
				if (pressed.equals(item.getKey())) {
					p = item.getValue();
				}
			}
			if (p != null) {
				if (validUser != true) {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
				} else {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
					String str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
					int option = JOptionPane.showConfirmDialog(null, str+"Amount added to Shopping Cart", "Add to Cart", JOptionPane.OK_CANCEL_OPTION);
					if (option == JOptionPane.OK_OPTION) {
						if (!isInteger(str)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
						boolean result = ((Shopper) cur_user).addtoCart(p, Integer.parseInt(str));
						if (!result) {
							JOptionPane.showMessageDialog(null,
									"The available amount is not sufficient for your order!");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
					}
				}

			}
		}

	}

	/**
	 * New frame just for the shopper's shopping cart
	 * 
	 * @author JLAI
	 *
	 */
	public class ShoppingCartFrame extends JFrame {
		JPanel pan;
		public Map<Product, Integer> cart;
		public Map<JButton, Product> ShoppingCarttempButton;
		public Shopper s;

		public ShoppingCartFrame(Map<Product, Integer> cart, Shopper s) {
			this.cart = cart;
			this.s = s;
			pan = new JPanel();
			ShoppingCarttempButton = new HashMap<JButton, Product>();
			drawProductImage2(cart);
			this.setSize(600, 400);
			this.setVisible(true);
		}

		public void drawProductImage2(Map<Product, Integer> prodList) {
			JLabel prod2;
			//tempProd.clear();
			for (HashMap.Entry<Product, Integer> item : prodList.entrySet()) {
				Product p = item.getKey();
				ImageIcon prodImage = new ImageIcon(p.image);
				JButton temp = new JButton();
				prod2 = new JLabel();
				temp.setIcon(prodImage);
				temp.addActionListener(new Action());
				prod2.add(temp);
				prod2.setToolTipText("Product: "+ p.description + " Price: " + p.price + " Available Quantity: " + p.quantity);
				// prod.setText("Quantity: ");
				// prod.setHorizontalTextPosition(JLabel.CENTER);
				// prod.setVerticalTextPosition(JLabel.BOTTOM);
				// prod.add(temp);
				pan.add(temp);
				add(pan);
				ShoppingCarttempButton.put(temp, p);		
			}
			revalidate();
		}

		class Action implements ActionListener {

			@Override
			public void actionPerformed(ActionEvent e) {
				JButton press = (JButton) e.getSource();
				Product p1 = null;
				for (Map.Entry<JButton, Product> item : ShoppingCarttempButton.entrySet()) {
					if (press.equals(item.getKey())) {
						p1 = item.getValue();
					}
				}
				if (p1 != null) {
					JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + cart.get(p1) +"\n");
					String st = JOptionPane.showInputDialog("Remove item or Update Quantity (Type R or U)");
					if (st.equals("R")) {
						s.removeFromCart(p1);
						JOptionPane.showMessageDialog(null, "Item has been removed from the cart");
					}
					else if (st.equals("U")) {
						st = JOptionPane.showInputDialog("Type in your desired Quantity");
						if (!isInteger(st)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							st = JOptionPane.showInputDialog("Type in your desired Quantity");
						}
						else{
							int num = Integer.parseInt(st);
							num = num - cart.get(p1);
							s.addtoCart(p1, num);
							JOptionPane.showMessageDialog(null, "Desired Quantity has been updated.");
							JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + num+ "\n");
						}
					} else {
						JOptionPane.showMessageDialog(null, "Wrong Input!!!");
						st = JOptionPane.showInputDialog("Remove Product or Update Quantity (Type R or U)");
					}
				}
			}
		}
	}

	public void AdminFrame(User u) {
		Administrator admin = (Administrator) u;
		cur_user = admin;
		validUser = false;

		addCategory.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField catName = new JTextField();
				Object[] message = { "Category name:", catName};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Category", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION){
					String result = catName.getText();
					try {
						int num = p.addCategory(result, admin.sessionID);
						if (num == -1){
							JOptionPane.showMessageDialog(null, "Category is already existed or the input is invalid.");
						}
						else
							JOptionPane.showMessageDialog(null, "New Category has been added.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		});

		addProduct.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prodname = new JTextField();
				JTextField category = new JTextField();
				JTextField price = new JTextField();
				JTextField imgpath = new JTextField();
				Object[] message = { "Product name:", prodname, "Category:", category, "Price:", price , "Image Path:", imgpath};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (category.getText().equals("") || prodname.getText().equals("") || price.getText().equals("") || imgpath.getText().equals("") 
							|| !isInteger(price.getText())) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
						}
					else{
						int result;
						try {
							int code = p.inv.findID(category.getText());
							if (code != -1) {
								result = p.addProduct(prodname.getText(), code, Double.parseDouble(price.getText()), admin.sessionID);}
							else { result = code; }
							if (result == -1){
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
							else{
								p.inv.findProduct(result).image = imgpath.getText();
								p.inventoryManager.writeFile(p.inv);
								JOptionPane.showMessageDialog(null, "Product has been added");
								refresh();
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
			}
			}
		});

		addRoute.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField cityA = new JTextField();
				JTextField cityB = new JTextField();
				JTextField distance = new JTextField();
				Object[] message = { "City A:", cityA, "City B:", cityB, "Distance:", distance };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (cityA.getText().equals("") || cityB.equals("") || distance.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							p.addRoute(cityA.getText(), cityB.getText(), Integer.parseInt(distance.getText()), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New route added.");
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (EdgeExistsException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The Route already existed.");
						}
					}
			}
		}
	});
		
		maintainQuantity.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prod = new JTextField();
				JTextField distCentre = new JTextField();
				JTextField quantity = new JTextField();
				Object[] message = { "Product Name", prod, "Distribution Centre:", distCentre, "Quantity", quantity };
				int option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (prod.getText().equals("") || distCentre.equals("") || quantity.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							int prodID = p.inv.findProductID(prod.getText());
							boolean flag = p.updateQuantity(prodID, distCentre.getText(), Integer.parseInt(quantity.getText()), admin.sessionID);
							if (flag){
								JOptionPane.showMessageDialog(null, "Product has been updated");
							}
							else{
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null, "Invalid Input");
						}
					}
			}
		}
	});

		// Method to check whether this city exists
		addWarehouse.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField city = new JTextField();
				Object[] message = { "City:", city };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (city.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse",
								JOptionPane.OK_CANCEL_OPTION);
					} else {
						try {
							p.addDistributionCenter(city.getText(), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New Warehouse added.(the warehouse may exist before added)");
						}catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}catch (CityDNEException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The city do not exist.");
						}

					}
				}
			}
		});
		
		salesReport.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				SalesReport s = new SalesReport(admin,p.inv);
			}
			
		});

		// Generate sales report method

		revalidate();
		addCategory.setVisible(true);
		addProduct.setVisible(true);
		salesReport.setVisible(true);
		addRoute.setVisible(true);
		maintainQuantity.setVisible(true);
		addWarehouse.setVisible(true);

		// private void mouseClicked(MouseEvent e){
		// for (JLabel image: tempProd){
		// if (e.getSource() == image){

		// }
		// }
		// }

	}
	
	public class SalesReport extends JFrame{
		private JLabel label;
		private JPanel panell;
		private Administrator admin;
		private Inventory inv;
		public SalesReport(Administrator admin, Inventory inv){
			this.admin = admin;
			this.inv = inv;
			panell = new JPanel();
			HashMap<Product, Integer> result = this.admin.salesReport(this.inv);
//			String message = "";
			label = new JLabel("======Sales Report===== \n");
			panell.add(label);
			for (HashMap.Entry<Product,Integer> cart : result.entrySet()){
				String message = "";
				message += "Product ID: " + cart.getKey().ID;
				message += "  Product Name: " + cart.getKey().description;
				message += "  Quantity: " + cart.getValue();
				message += "  Total: " + cart.getKey().price * cart.getValue();
  				message += "================== \n";
				label = new JLabel(message);
				panell.add(label);
			}
//		label = new JLabel(message);
	//		panell.add(label);
			add(panell);
			this.setSize(600, 400);
			this.setVisible(true);
		}
	}
	
	public class OrderReport extends JFrame{
		private JLabel lab;
		private JPanel pane2;
		private Shopper shopper;
		public OrderReport(Shopper shopper){
			this.shopper = shopper;
			pane2 = new JPanel();
			for (Invoice i : shopper.invoice){
				String result = "";
				result += "Invoice: " + i.iToString();
				lab = new JLabel(result);
				pane2.add(lab);
			}
			add(pane2);
			this.setSize(600, 400);
			this.setVisible(true);
			}

		}
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2016-08-05 12:00:24.264
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2016-08-05 12:00:24.265
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:270)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:202)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2016-08-05 12:00:24.287
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package finalproject;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.RootPaneContainer;

import com.sun.glass.events.MouseEvent;

import exercise2.EdgeExistsException;
import exercise2.Vertex;
import finalproject.ProjectV1.ShoppingCartItem;

/**
 * @author c6luoyil
 *
 */
public class Shop extends JFrame {
	private JMenuBar bar;
	private RegisterListener reglistener;
	private LoginListener loginlistener;
	private LogoutListener logoutlistener;
	private BrowseListener browselistener;
	private JMenu startMenu;
	private JButton browseButton;
	private JMenuItem registerItem, loginItem, logoutItem;
	private JLabel welcome;
	private static boolean loggedIn = false;
	private boolean loggedOut = true;
	private Map<Product, Integer> productList;
	private List<JLabel> tempProd;
	private Map<JButton, Product> tempButton;
	private static boolean inShoppingCart = false;
	private User cur_user;
	private static boolean validUser = false;
	private ArrayList<JLabel> labels;
	JButton shoppingcart;
	JButton checkout;
	JButton info;
	JButton history;
	JButton addCategory;
	JButton addProduct;
	JButton addWarehouse;
	JButton maintainQuantity;
	JButton addRoute;
	JButton salesReport;
	JButton refresh;
	

	private JPanel panel;
	// private JScrollPane panel;
	protected ProjectV1 p;
	protected int sessionID;

	public Shop() throws IOException {
		super("Shopping App");
		setContentPane(new JLabel(new ImageIcon("Products/bg.jpg")));
		setLayout(new FlowLayout());

		p = new ProjectV1();
		panel = new JPanel();

		// JScrollPane panel = new JScrollPane(this,
		// JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
		// JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		welcome = new JLabel();
		welcome.setFont(new Font("Sanserif", Font.ITALIC, 10));
		welcome.setEnabled(false);
		productList = new HashMap<Product, Integer>();
		tempButton = new HashMap<JButton, Product>();
		tempProd = new ArrayList<>();
		addProducts();

		bar = new JMenuBar();
		setJMenuBar(bar);
		startMenu = new JMenu("Start");
		bar.add(startMenu);

		registerItem = new JMenuItem("Register");
		// registerItem.setMnemonic('I');
		startMenu.add(registerItem);
		reglistener = new RegisterListener();
		registerItem.addActionListener(reglistener);

		loginItem = new JMenuItem("Log In");
		// loginItem.setMnemonic('I');
		startMenu.add(loginItem);
		loginlistener = new LoginListener();
		loginItem.addActionListener(loginlistener);

		logoutItem = new JMenuItem("Log Out");
		// logoutItem.setMnemonic(KeyEvent.VK_T);
		logoutItem.setEnabled(false);
		logoutlistener = new LogoutListener();
		logoutItem.addActionListener(logoutlistener);
		startMenu.add(logoutItem);

		browseButton = new JButton("Browse");
		bar.add(browseButton);
		browselistener = new BrowseListener();
		browseButton.addActionListener(browselistener);
		
		shoppingcart = new JButton("Shopping Cart");
		checkout = new JButton("CheckOut");
		info = new JButton("Personal information");
		history = new JButton("History of Purchase");
		bar.add(checkout);
		bar.add(shoppingcart);
		bar.add(info);
		bar.add(history);
		
		
		addCategory = new JButton("Add category");
		 addProduct = new JButton("Add Product");
		addWarehouse = new JButton("Add WareHouse");
		maintainQuantity = new JButton("Maintain Product Quantities");
		addRoute = new JButton("Add Shipping route");
		salesReport = new JButton("SalesReport");
		bar.add(addCategory);
		bar.add(addProduct);
		bar.add(salesReport);
		bar.add(addRoute);
		bar.add(maintainQuantity);
		bar.add(addWarehouse);

		labels = new ArrayList();
		this.setSize(600, 400);
		this.setVisible(true);
		
		addCategory.setVisible(false);
		addProduct.setVisible(false);
		salesReport.setVisible(false);
		addRoute.setVisible(false);
		maintainQuantity.setVisible(false);
		addWarehouse.setVisible(false);
		checkout.setVisible(false);
		shoppingcart.setVisible(false);
		info.setVisible(false);
		history.setVisible(false);
	}

	private void addProducts() {
		List<Product> products = p.inv.allProduct();
		for (Product p : products) {
			productList.put(p, p.quantity);
		}
		drawProductImage(productList);
	}

	// need to do
	private class LoginListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			try {
				User u = isAuthenticated();
				if (u != null) {
					loggedIn = true;
					loginItem.setEnabled(false);
					logoutItem.setEnabled(true);
					bar.add(add(Box.createHorizontalGlue()));
					bar.add(welcome);
					for (JLabel l : tempProd)
						l.setToolTipText("Add to shopping cart!");
					revalidate();
					if (u.type.equals("Shopper")) {
						ShopperFrame(u);
					} else {
						AdminFrame(u);
					}

				}
			} catch (NumberFormatException | OutOfStockException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private class LogoutListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			if (cur_user != null) {
				try {
					p.logout(cur_user.sessionID);
					cur_user = null;
					loginItem.setEnabled(true);
					logoutItem.setEnabled(false);
					addCategory.setVisible(false);
					addProduct.setVisible(false);
					salesReport.setVisible(false);
					addRoute.setVisible(false);
					maintainQuantity.setVisible(false);
					addWarehouse.setVisible(false);
					checkout.setVisible(false);
					shoppingcart.setVisible(false);
					info.setVisible(false);
					history.setVisible(false);
					
					refresh();
					validUser = false;
					validate();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	public void refresh() {
		panel.removeAll();
		welcome.setText("");
		addProducts();
		revalidate();
	}

	class RegisterListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			JTextField username = new JTextField();
			JTextField password = new JPasswordField();
			JTextField check = new JTextField();
			Object[] message = { "Username:", username, "Password:", password, "Are you Admin? (Yes or No)", check };
			int option = JOptionPane.showConfirmDialog(null, message, "Register", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (username.getText().equals("") || password.equals(""))
					JOptionPane.showMessageDialog(null, "Please input username and password.");
				if (check.getText().equals("Yes")) {
					try {
						boolean x = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								true);
						if (!x)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else if (check.getText().equals("No")) {
					try {
						boolean y = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								false);
						if (!y)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					JOptionPane.showMessageDialog(null, "Please input 'Yes' or 'No' for 'Are you Admin?'");
				}
			}
		}
	}

	public void drawProductImage(Map<Product, Integer> prodList) {
		//labels.clear();
		JLabel prod;
		//tempProd.clear();
		for (Map.Entry<Product, Integer> item : prodList.entrySet()) {
			Product p = item.getKey();
			ImageIcon prodImage = new ImageIcon(p.image);
			prod = new JLabel();
			JButton temp = new JButton();
			temp.setIcon(prodImage);
			temp.addActionListener(new ButtonAction());
			//labels.add(prod);
			// prod.setText("Quantity: ");
			// prod.setHorizontalTextPosition(JLabel.CENTER);
			// prod.setVerticalTextPosition(JLabel.BOTTOM);
			// prod.add(temp);
			panel.add(temp);
			add(panel);
			tempProd.add(prod);
			tempButton.put(temp, p);
		}
	}

	class BrowseListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			int min;
			int max;
			JTextField category = new JTextField();
			JTextField maxp = new JTextField();
			JTextField minp = new JTextField();
			Object[] message = { "Category:", category, "Min Price:", minp, "Max price:", maxp };
			int option = JOptionPane.showConfirmDialog(null, message, "Search", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (category.getText().equals("") || minp.equals("") || maxp.equals(""))
					JOptionPane.showMessageDialog(null, "Please fill in information!");
				try {
					min = Integer.parseInt(minp.getText());
					max = Integer.parseInt(maxp.getText());
					if (min >= 0) {
						tempProd.clear();
						ArrayList<Product> browsed = User.browseMerchandise(p.inv, category.getText(), max, min);
						Map<Product, Integer> prodList = new HashMap<Product, Integer>();
						for (Product p : browsed) {
							prodList.put(p, p.quantity);
						}
						panel.removeAll();
						drawProductImage(prodList);
						revalidate();
					}
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(null, "Please fill in Number for Price!");
					// not an integer!
				}
			}
		}
	}

	private User isAuthenticated() throws NumberFormatException, OutOfStockException, IOException {
		JTextField username = new JTextField();
		JTextField password = new JPasswordField();
		Object[] message = { "Username:", username, "Password:", password };
		// boolean result = true;
		User result = null;
		int sessionID;
		int option = JOptionPane.showConfirmDialog(null, message, "Login", JOptionPane.OK_CANCEL_OPTION);
		if (option == JOptionPane.OK_OPTION) {

			if (username.getText().equals("") || password.equals(""))
				JOptionPane.showMessageDialog(null, "Please input username and password.");

			sessionID = p.login(username.getText(), new String(((JPasswordField) password).getPassword()));
			if (sessionID != -1) {
				
				welcome.setText("Welcome, " + username.getText() + "!  ");
				this.sessionID = sessionID;
				result = User.allUser.get(sessionID);
			} else {
				JOptionPane.showMessageDialog(null, "Wrong Password/Username");
				// result = false;
			}
		}
		return result;
	}

	public boolean hasLoggedOut() {
		return loggedOut;
	}

	public void ShopperFrame(User u) {
		validUser = true;
		Shopper s = (Shopper) u;
		cur_user = s;
		checkout.setVisible(true);
		shoppingcart.setVisible(true);
		info.setVisible(true);
		history.setVisible(true);


		shoppingcart.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				Map<Product, Integer> cart = s.getShoppingCart();
				ShoppingCartFrame sf = new ShoppingCartFrame(cart, s);
				for (JLabel l : tempProd)
					l.setToolTipText("The item is in your shopping cart");

			}

		});

		history.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				OrderReport o = new OrderReport(s);
			}
			
		});

		checkout.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (s.address != null){
					if (p.customer.containsKey(s.address.ID)){
						try {
							if (s.cart.size()!=0){
								int orderID = p.checkout(s.address.ID, s.sessionID);
								if (orderID != 0){
									JOptionPane.showMessageDialog(null, "Thank you. You have checked out.");
									JOptionPane.showMessageDialog(null, Order.orderList.get(orderID).toString());
								}
								else
									JOptionPane.showMessageDialog(null, "Check out failed.");
							}
							else
								
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					else{
						JOptionPane.showMessageDialog(null, "Customer information not added");
					}
				}
				else{
					JOptionPane.showMessageDialog(null, "Customer information not added");
				}

			}

		});

		info.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JTextField name = new JTextField();
				JTextField city = new JTextField();
				JTextField street = new JTextField();
				Object[] message = { "Name:", name, "Street:", street, "City:", city, };
				int option = JOptionPane.showConfirmDialog(null, message, "Personal Information",
						JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (name.getText().equals("") || city.getText().equals("") || street.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Please fill in information!");
					} else {
						int success = p.addCustomer(name.getText(), city.getText(), street.getText(), sessionID);
						if (success == -1)
							JOptionPane.showMessageDialog(null, "Data already exists");
						else
							JOptionPane.showMessageDialog(null, "Thank You!");
					}
				}
			}

		});

	}

	public static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch (NumberFormatException e) {
			return false;
		} catch (NullPointerException e) {
			return false;
		}
		// only got here if we didn't return false
		return true;
	}

	class ButtonAction implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			JButton pressed = (JButton) e.getSource();
			Product p = null;
			for (Map.Entry<JButton, Product> item : tempButton.entrySet()) {
				if (pressed.equals(item.getKey())) {
					p = item.getValue();
				}
			}
			if (p != null) {
				if (validUser != true) {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
				} else {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
					String str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
					int option = JOptionPane.showConfirmDialog(null, str+"Amount added to Shopping Cart", "Add to Cart", JOptionPane.OK_CANCEL_OPTION);
					if (option == JOptionPane.OK_OPTION) {
						if (!isInteger(str)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
						boolean result = ((Shopper) cur_user).addtoCart(p, Integer.parseInt(str));
						if (!result) {
							JOptionPane.showMessageDialog(null,
									"The available amount is not sufficient for your order!");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
					}
				}

			}
		}

	}

	/**
	 * New frame just for the shopper's shopping cart
	 * 
	 * @author JLAI
	 *
	 */
	public class ShoppingCartFrame extends JFrame {
		JPanel pan;
		public Map<Product, Integer> cart;
		public Map<JButton, Product> ShoppingCarttempButton;
		public Shopper s;

		public ShoppingCartFrame(Map<Product, Integer> cart, Shopper s) {
			this.cart = cart;
			this.s = s;
			pan = new JPanel();
			ShoppingCarttempButton = new HashMap<JButton, Product>();
			drawProductImage2(cart);
			this.setSize(600, 400);
			this.setVisible(true);
		}

		public void drawProductImage2(Map<Product, Integer> prodList) {
			JLabel prod2;
			//tempProd.clear();
			for (HashMap.Entry<Product, Integer> item : prodList.entrySet()) {
				Product p = item.getKey();
				ImageIcon prodImage = new ImageIcon(p.image);
				JButton temp = new JButton();
				prod2 = new JLabel();
				temp.setIcon(prodImage);
				temp.addActionListener(new Action());
				prod2.add(temp);
				prod2.setToolTipText("Product: "+ p.description + " Price: " + p.price + " Available Quantity: " + p.quantity);
				// prod.setText("Quantity: ");
				// prod.setHorizontalTextPosition(JLabel.CENTER);
				// prod.setVerticalTextPosition(JLabel.BOTTOM);
				// prod.add(temp);
				pan.add(temp);
				add(pan);
				ShoppingCarttempButton.put(temp, p);		
			}
			revalidate();
		}

		class Action implements ActionListener {

			@Override
			public void actionPerformed(ActionEvent e) {
				JButton press = (JButton) e.getSource();
				Product p1 = null;
				for (Map.Entry<JButton, Product> item : ShoppingCarttempButton.entrySet()) {
					if (press.equals(item.getKey())) {
						p1 = item.getValue();
					}
				}
				if (p1 != null) {
					JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + cart.get(p1) +"\n");
					String st = JOptionPane.showInputDialog("Remove item or Update Quantity (Type R or U)");
					if (st.equals("R")) {
						s.removeFromCart(p1);
						JOptionPane.showMessageDialog(null, "Item has been removed from the cart");
					}
					else if (st.equals("U")) {
						st = JOptionPane.showInputDialog("Type in your desired Quantity");
						if (!isInteger(st)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							st = JOptionPane.showInputDialog("Type in your desired Quantity");
						}
						else{
							int num = Integer.parseInt(st);
							num = num - cart.get(p1);
							s.addtoCart(p1, num);
							JOptionPane.showMessageDialog(null, "Desired Quantity has been updated.");
							JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + num+ "\n");
						}
					} else {
						JOptionPane.showMessageDialog(null, "Wrong Input!!!");
						st = JOptionPane.showInputDialog("Remove Product or Update Quantity (Type R or U)");
					}
				}
			}
		}
	}

	public void AdminFrame(User u) {
		Administrator admin = (Administrator) u;
		cur_user = admin;
		validUser = false;

		addCategory.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField catName = new JTextField();
				Object[] message = { "Category name:", catName};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Category", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION){
					String result = catName.getText();
					try {
						int num = p.addCategory(result, admin.sessionID);
						if (num == -1){
							JOptionPane.showMessageDialog(null, "Category is already existed or the input is invalid.");
						}
						else
							JOptionPane.showMessageDialog(null, "New Category has been added.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		});

		addProduct.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prodname = new JTextField();
				JTextField category = new JTextField();
				JTextField price = new JTextField();
				JTextField imgpath = new JTextField();
				Object[] message = { "Product name:", prodname, "Category:", category, "Price:", price , "Image Path:", imgpath};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (category.getText().equals("") || prodname.getText().equals("") || price.getText().equals("") || imgpath.getText().equals("") 
							|| !isInteger(price.getText())) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
						}
					else{
						int result;
						try {
							int code = p.inv.findID(category.getText());
							if (code != -1) {
								result = p.addProduct(prodname.getText(), code, Double.parseDouble(price.getText()), admin.sessionID);}
							else { result = code; }
							if (result == -1){
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
							else{
								p.inv.findProduct(result).image = imgpath.getText();
								p.inventoryManager.writeFile(p.inv);
								JOptionPane.showMessageDialog(null, "Product has been added");
								refresh();
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
			}
			}
		});

		addRoute.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField cityA = new JTextField();
				JTextField cityB = new JTextField();
				JTextField distance = new JTextField();
				Object[] message = { "City A:", cityA, "City B:", cityB, "Distance:", distance };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (cityA.getText().equals("") || cityB.equals("") || distance.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							p.addRoute(cityA.getText(), cityB.getText(), Integer.parseInt(distance.getText()), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New route added.");
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (EdgeExistsException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The Route already existed.");
						}
					}
			}
		}
	});
		
		maintainQuantity.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prod = new JTextField();
				JTextField distCentre = new JTextField();
				JTextField quantity = new JTextField();
				Object[] message = { "Product Name", prod, "Distribution Centre:", distCentre, "Quantity", quantity };
				int option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (prod.getText().equals("") || distCentre.equals("") || quantity.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							int prodID = p.inv.findProductID(prod.getText());
							boolean flag = p.updateQuantity(prodID, distCentre.getText(), Integer.parseInt(quantity.getText()), admin.sessionID);
							if (flag){
								JOptionPane.showMessageDialog(null, "Product has been updated");
							}
							else{
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null, "Invalid Input");
						}
					}
			}
		}
	});

		// Method to check whether this city exists
		addWarehouse.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField city = new JTextField();
				Object[] message = { "City:", city };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (city.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse",
								JOptionPane.OK_CANCEL_OPTION);
					} else {
						try {
							p.addDistributionCenter(city.getText(), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New Warehouse added.(the warehouse may exist before added)");
						}catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}catch (CityDNEException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The city do not exist.");
						}

					}
				}
			}
		});
		
		salesReport.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				SalesReport s = new SalesReport(admin,p.inv);
			}
			
		});

		// Generate sales report method

		revalidate();
		addCategory.setVisible(true);
		addProduct.setVisible(true);
		salesReport.setVisible(true);
		addRoute.setVisible(true);
		maintainQuantity.setVisible(true);
		addWarehouse.setVisible(true);

		// private void mouseClicked(MouseEvent e){
		// for (JLabel image: tempProd){
		// if (e.getSource() == image){

		// }
		// }
		// }

	}
	
	public class SalesReport extends JFrame{
		private JLabel label;
		private JPanel panell;
		private Administrator admin;
		private Inventory inv;
		public SalesReport(Administrator admin, Inventory inv){
			this.admin = admin;
			this.inv = inv;
			panell = new JPanel();
			HashMap<Product, Integer> result = this.admin.salesReport(this.inv);
//			String message = "";
			label = new JLabel("======Sales Report===== \n");
			panell.add(label);
			for (HashMap.Entry<Product,Integer> cart : result.entrySet()){
				String message = "";
				message += "Product ID: " + cart.getKey().ID;
				message += "  Product Name: " + cart.getKey().description;
				message += "  Quantity: " + cart.getValue();
				message += "  Total: " + cart.getKey().price * cart.getValue();
  				message += "================== \n";
				label = new JLabel(message);
				panell.add(label);
			}
//		label = new JLabel(message);
	//		panell.add(label);
			add(panell);
			this.setSize(600, 400);
			this.setVisible(true);
		}
	}
	
	public class OrderReport extends JFrame{
		private JLabel lab;
		private JPanel pane2;
		private Shopper shopper;
		public OrderReport(Shopper shopper){
			this.shopper = shopper;
			pane2 = new JPanel();
			for (Invoice i : shopper.invoice){
				String result = "";
				result += "Invoice: " + i.iToString();
				lab = new JLabel(result);
				pane2.add(lab);
			}
			add(pane2);
			this.setSize(600, 400);
			this.setVisible(true);
			}

		}
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:461)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2016-08-05 12:00:24.288
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:461)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2016-08-05 12:00:24.289
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:461)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2016-08-05 12:00:27.349
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package finalproject;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.RootPaneContainer;

import com.sun.glass.events.MouseEvent;

import exercise2.EdgeExistsException;
import exercise2.Vertex;
import finalproject.ProjectV1.ShoppingCartItem;

/**
 * @author c6luoyil
 *
 */
public class Shop extends JFrame {
	private JMenuBar bar;
	private RegisterListener reglistener;
	private LoginListener loginlistener;
	private LogoutListener logoutlistener;
	private BrowseListener browselistener;
	private JMenu startMenu;
	private JButton browseButton;
	private JMenuItem registerItem, loginItem, logoutItem;
	private JLabel welcome;
	private static boolean loggedIn = false;
	private boolean loggedOut = true;
	private Map<Product, Integer> productList;
	private List<JLabel> tempProd;
	private Map<JButton, Product> tempButton;
	private static boolean inShoppingCart = false;
	private User cur_user;
	private static boolean validUser = false;
	private ArrayList<JLabel> labels;
	JButton shoppingcart;
	JButton checkout;
	JButton info;
	JButton history;
	JButton addCategory;
	JButton addProduct;
	JButton addWarehouse;
	JButton maintainQuantity;
	JButton addRoute;
	JButton salesReport;
	JButton refresh;
	

	private JPanel panel;
	// private JScrollPane panel;
	protected ProjectV1 p;
	protected int sessionID;

	public Shop() throws IOException {
		super("Shopping App");
		setContentPane(new JLabel(new ImageIcon("Products/bg.jpg")));
		setLayout(new FlowLayout());

		p = new ProjectV1();
		panel = new JPanel();

		// JScrollPane panel = new JScrollPane(this,
		// JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
		// JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		welcome = new JLabel();
		welcome.setFont(new Font("Sanserif", Font.ITALIC, 10));
		welcome.setEnabled(false);
		productList = new HashMap<Product, Integer>();
		tempButton = new HashMap<JButton, Product>();
		tempProd = new ArrayList<>();
		addProducts();

		bar = new JMenuBar();
		setJMenuBar(bar);
		startMenu = new JMenu("Start");
		bar.add(startMenu);

		registerItem = new JMenuItem("Register");
		// registerItem.setMnemonic('I');
		startMenu.add(registerItem);
		reglistener = new RegisterListener();
		registerItem.addActionListener(reglistener);

		loginItem = new JMenuItem("Log In");
		// loginItem.setMnemonic('I');
		startMenu.add(loginItem);
		loginlistener = new LoginListener();
		loginItem.addActionListener(loginlistener);

		logoutItem = new JMenuItem("Log Out");
		// logoutItem.setMnemonic(KeyEvent.VK_T);
		logoutItem.setEnabled(false);
		logoutlistener = new LogoutListener();
		logoutItem.addActionListener(logoutlistener);
		startMenu.add(logoutItem);

		browseButton = new JButton("Browse");
		bar.add(browseButton);
		browselistener = new BrowseListener();
		browseButton.addActionListener(browselistener);
		
		shoppingcart = new JButton("Shopping Cart");
		checkout = new JButton("CheckOut");
		info = new JButton("Personal information");
		history = new JButton("History of Purchase");
		bar.add(checkout);
		bar.add(shoppingcart);
		bar.add(info);
		bar.add(history);
		
		
		addCategory = new JButton("Add category");
		 addProduct = new JButton("Add Product");
		addWarehouse = new JButton("Add WareHouse");
		maintainQuantity = new JButton("Maintain Product Quantities");
		addRoute = new JButton("Add Shipping route");
		salesReport = new JButton("SalesReport");
		bar.add(addCategory);
		bar.add(addProduct);
		bar.add(salesReport);
		bar.add(addRoute);
		bar.add(maintainQuantity);
		bar.add(addWarehouse);

		labels = new ArrayList();
		this.setSize(600, 400);
		this.setVisible(true);
		
		addCategory.setVisible(false);
		addProduct.setVisible(false);
		salesReport.setVisible(false);
		addRoute.setVisible(false);
		maintainQuantity.setVisible(false);
		addWarehouse.setVisible(false);
		checkout.setVisible(false);
		shoppingcart.setVisible(false);
		info.setVisible(false);
		history.setVisible(false);
	}

	private void addProducts() {
		List<Product> products = p.inv.allProduct();
		for (Product p : products) {
			productList.put(p, p.quantity);
		}
		drawProductImage(productList);
	}

	// need to do
	private class LoginListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			try {
				User u = isAuthenticated();
				if (u != null) {
					loggedIn = true;
					loginItem.setEnabled(false);
					logoutItem.setEnabled(true);
					bar.add(add(Box.createHorizontalGlue()));
					bar.add(welcome);
					for (JLabel l : tempProd)
						l.setToolTipText("Add to shopping cart!");
					revalidate();
					if (u.type.equals("Shopper")) {
						ShopperFrame(u);
					} else {
						AdminFrame(u);
					}

				}
			} catch (NumberFormatException | OutOfStockException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private class LogoutListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			if (cur_user != null) {
				try {
					p.logout(cur_user.sessionID);
					cur_user = null;
					loginItem.setEnabled(true);
					logoutItem.setEnabled(false);
					addCategory.setVisible(false);
					addProduct.setVisible(false);
					salesReport.setVisible(false);
					addRoute.setVisible(false);
					maintainQuantity.setVisible(false);
					addWarehouse.setVisible(false);
					checkout.setVisible(false);
					shoppingcart.setVisible(false);
					info.setVisible(false);
					history.setVisible(false);
					
					refresh();
					validUser = false;
					validate();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	public void refresh() {
		panel.removeAll();
		welcome.setText("");
		addProducts();
		revalidate();
	}

	class RegisterListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			JTextField username = new JTextField();
			JTextField password = new JPasswordField();
			JTextField check = new JTextField();
			Object[] message = { "Username:", username, "Password:", password, "Are you Admin? (Yes or No)", check };
			int option = JOptionPane.showConfirmDialog(null, message, "Register", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (username.getText().equals("") || password.equals(""))
					JOptionPane.showMessageDialog(null, "Please input username and password.");
				if (check.getText().equals("Yes")) {
					try {
						boolean x = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								true);
						if (!x)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else if (check.getText().equals("No")) {
					try {
						boolean y = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								false);
						if (!y)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					JOptionPane.showMessageDialog(null, "Please input 'Yes' or 'No' for 'Are you Admin?'");
				}
			}
		}
	}

	public void drawProductImage(Map<Product, Integer> prodList) {
		//labels.clear();
		JLabel prod;
		//tempProd.clear();
		for (Map.Entry<Product, Integer> item : prodList.entrySet()) {
			Product p = item.getKey();
			ImageIcon prodImage = new ImageIcon(p.image);
			prod = new JLabel();
			JButton temp = new JButton();
			temp.setIcon(prodImage);
			temp.addActionListener(new ButtonAction());
			//labels.add(prod);
			// prod.setText("Quantity: ");
			// prod.setHorizontalTextPosition(JLabel.CENTER);
			// prod.setVerticalTextPosition(JLabel.BOTTOM);
			// prod.add(temp);
			panel.add(temp);
			add(panel);
			tempProd.add(prod);
			tempButton.put(temp, p);
		}
	}

	class BrowseListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			int min;
			int max;
			JTextField category = new JTextField();
			JTextField maxp = new JTextField();
			JTextField minp = new JTextField();
			Object[] message = { "Category:", category, "Min Price:", minp, "Max price:", maxp };
			int option = JOptionPane.showConfirmDialog(null, message, "Search", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (category.getText().equals("") || minp.equals("") || maxp.equals(""))
					JOptionPane.showMessageDialog(null, "Please fill in information!");
				try {
					min = Integer.parseInt(minp.getText());
					max = Integer.parseInt(maxp.getText());
					if (min >= 0) {
						tempProd.clear();
						ArrayList<Product> browsed = User.browseMerchandise(p.inv, category.getText(), max, min);
						Map<Product, Integer> prodList = new HashMap<Product, Integer>();
						for (Product p : browsed) {
							prodList.put(p, p.quantity);
						}
						panel.removeAll();
						drawProductImage(prodList);
						revalidate();
					}
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(null, "Please fill in Number for Price!");
					// not an integer!
				}
			}
		}
	}

	private User isAuthenticated() throws NumberFormatException, OutOfStockException, IOException {
		JTextField username = new JTextField();
		JTextField password = new JPasswordField();
		Object[] message = { "Username:", username, "Password:", password };
		// boolean result = true;
		User result = null;
		int sessionID;
		int option = JOptionPane.showConfirmDialog(null, message, "Login", JOptionPane.OK_CANCEL_OPTION);
		if (option == JOptionPane.OK_OPTION) {

			if (username.getText().equals("") || password.equals(""))
				JOptionPane.showMessageDialog(null, "Please input username and password.");

			sessionID = p.login(username.getText(), new String(((JPasswordField) password).getPassword()));
			if (sessionID != -1) {
				
				welcome.setText("Welcome, " + username.getText() + "!  ");
				this.sessionID = sessionID;
				result = User.allUser.get(sessionID);
			} else {
				JOptionPane.showMessageDialog(null, "Wrong Password/Username");
				// result = false;
			}
		}
		return result;
	}

	public boolean hasLoggedOut() {
		return loggedOut;
	}

	public void ShopperFrame(User u) {
		validUser = true;
		Shopper s = (Shopper) u;
		cur_user = s;
		checkout.setVisible(true);
		shoppingcart.setVisible(true);
		info.setVisible(true);
		history.setVisible(true);


		shoppingcart.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				Map<Product, Integer> cart = s.getShoppingCart();
				ShoppingCartFrame sf = new ShoppingCartFrame(cart, s);
				for (JLabel l : tempProd)
					l.setToolTipText("The item is in your shopping cart");

			}

		});

		history.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				OrderReport o = new OrderReport(s);
			}
			
		});

		checkout.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (s.address != null){
					if (p.customer.containsKey(s.address.ID)){
						try {
							if (s.cart.size()!=0){
								int orderID = p.checkout(s.address.ID, s.sessionID);
								if (orderID != 0){
									JOptionPane.showMessageDialog(null, "Thank you. You have checked out.");
									JOptionPane.showMessageDialog(null, Order.orderList.get(orderID).toString());
								}
								else
									JOptionPane.showMessageDialog(null, "Check out failed.");
							}
							else
								
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					else{
						JOptionPane.showMessageDialog(null, "Customer information not added");
					}
				}
				else{
					JOptionPane.showMessageDialog(null, "Customer information not added");
				}

			}

		});

		info.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JTextField name = new JTextField();
				JTextField city = new JTextField();
				JTextField street = new JTextField();
				Object[] message = { "Name:", name, "Street:", street, "City:", city, };
				int option = JOptionPane.showConfirmDialog(null, message, "Personal Information",
						JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (name.getText().equals("") || city.getText().equals("") || street.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Please fill in information!");
					} else {
						int success = p.addCustomer(name.getText(), city.getText(), street.getText(), sessionID);
						if (success == -1)
							JOptionPane.showMessageDialog(null, "Data already exists");
						else
							JOptionPane.showMessageDialog(null, "Thank You!");
					}
				}
			}

		});

	}

	public static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch (NumberFormatException e) {
			return false;
		} catch (NullPointerException e) {
			return false;
		}
		// only got here if we didn't return false
		return true;
	}

	class ButtonAction implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			JButton pressed = (JButton) e.getSource();
			Product p = null;
			for (Map.Entry<JButton, Product> item : tempButton.entrySet()) {
				if (pressed.equals(item.getKey())) {
					p = item.getValue();
				}
			}
			if (p != null) {
				if (validUser != true) {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
				} else {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
					String str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
					int option = JOptionPane.showConfirmDialog(null, str+"Amount added to Shopping Cart", "Add to Cart", JOptionPane.OK_CANCEL_OPTION);
					if (option == JOptionPane.OK_OPTION) {
						if (!isInteger(str)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
						boolean result = ((Shopper) cur_user).addtoCart(p, Integer.parseInt(str));
						if (!result) {
							JOptionPane.showMessageDialog(null,
									"The available amount is not sufficient for your order!");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
					}
				}

			}
		}

	}

	/**
	 * New frame just for the shopper's shopping cart
	 * 
	 * @author JLAI
	 *
	 */
	public class ShoppingCartFrame extends JFrame {
		JPanel pan;
		public Map<Product, Integer> cart;
		public Map<JButton, Product> ShoppingCarttempButton;
		public Shopper s;

		public ShoppingCartFrame(Map<Product, Integer> cart, Shopper s) {
			this.cart = cart;
			this.s = s;
			pan = new JPanel();
			ShoppingCarttempButton = new HashMap<JButton, Product>();
			drawProductImage2(cart);
			this.setSize(600, 400);
			this.setVisible(true);
		}

		public void drawProductImage2(Map<Product, Integer> prodList) {
			JLabel prod2;
			//tempProd.clear();
			for (HashMap.Entry<Product, Integer> item : prodList.entrySet()) {
				Product p = item.getKey();
				ImageIcon prodImage = new ImageIcon(p.image);
				JButton temp = new JButton();
				prod2 = new JLabel();
				temp.setIcon(prodImage);
				temp.addActionListener(new Action());
				prod2.add(temp);
				prod2.setToolTipText("Product: "+ p.description + " Price: " + p.price + " Available Quantity: " + p.quantity);
				// prod.setText("Quantity: ");
				// prod.setHorizontalTextPosition(JLabel.CENTER);
				// prod.setVerticalTextPosition(JLabel.BOTTOM);
				// prod.add(temp);
				pan.add(temp);
				add(pan);
				ShoppingCarttempButton.put(temp, p);		
			}
			revalidate();
		}

		class Action implements ActionListener {

			@Override
			public void actionPerformed(ActionEvent e) {
				JButton press = (JButton) e.getSource();
				Product p1 = null;
				for (Map.Entry<JButton, Product> item : ShoppingCarttempButton.entrySet()) {
					if (press.equals(item.getKey())) {
						p1 = item.getValue();
					}
				}
				if (p1 != null) {
					JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + cart.get(p1) +"\n");
					String st = JOptionPane.showInputDialog("Remove item or Update Quantity (Type R or U)");
					if (st.equals("R")) {
						s.removeFromCart(p1);
						JOptionPane.showMessageDialog(null, "Item has been removed from the cart");
					}
					else if (st.equals("U")) {
						st = JOptionPane.showInputDialog("Type in your desired Quantity");
						if (!isInteger(st)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							st = JOptionPane.showInputDialog("Type in your desired Quantity");
						}
						else{
							int num = Integer.parseInt(st);
							num = num - cart.get(p1);
							s.addtoCart(p1, num);
							JOptionPane.showMessageDialog(null, "Desired Quantity has been updated.");
							JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + num+ "\n");
						}
					} else {
						JOptionPane.showMessageDialog(null, "Wrong Input!!!");
						st = JOptionPane.showInputDialog("Remove Product or Update Quantity (Type R or U)");
					}
				}
			}
		}
	}

	public void AdminFrame(User u) {
		Administrator admin = (Administrator) u;
		cur_user = admin;
		validUser = false;

		addCategory.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField catName = new JTextField();
				Object[] message = { "Category name:", catName};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Category", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION){
					String result = catName.getText();
					try {
						int num = p.addCategory(result, admin.sessionID);
						if (num == -1){
							JOptionPane.showMessageDialog(null, "Category is already existed or the input is invalid.");
						}
						else
							JOptionPane.showMessageDialog(null, "New Category has been added.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		});

		addProduct.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prodname = new JTextField();
				JTextField category = new JTextField();
				JTextField price = new JTextField();
				JTextField imgpath = new JTextField();
				Object[] message = { "Product name:", prodname, "Category:", category, "Price:", price , "Image Path:", imgpath};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (category.getText().equals("") || prodname.getText().equals("") || price.getText().equals("") || imgpath.getText().equals("") 
							|| !isInteger(price.getText())) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
						}
					else{
						int result;
						try {
							int code = p.inv.findID(category.getText());
							if (code != -1) {
								result = p.addProduct(prodname.getText(), code, Double.parseDouble(price.getText()), admin.sessionID);}
							else { result = code; }
							if (result == -1){
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
							else{
								p.inv.findProduct(result).image = imgpath.getText();
								p.inventoryManager.writeFile(p.inv);
								JOptionPane.showMessageDialog(null, "Product has been added");
								refresh();
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
			}
			}
		});

		addRoute.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField cityA = new JTextField();
				JTextField cityB = new JTextField();
				JTextField distance = new JTextField();
				Object[] message = { "City A:", cityA, "City B:", cityB, "Distance:", distance };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (cityA.getText().equals("") || cityB.equals("") || distance.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							p.addRoute(cityA.getText(), cityB.getText(), Integer.parseInt(distance.getText()), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New route added.");
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (EdgeExistsException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The Route already existed.");
						}
					}
			}
		}
	});
		
		maintainQuantity.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prod = new JTextField();
				JTextField distCentre = new JTextField();
				JTextField quantity = new JTextField();
				Object[] message = { "Product Name", prod, "Distribution Centre:", distCentre, "Quantity", quantity };
				int option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (prod.getText().equals("") || distCentre.equals("") || quantity.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							int prodID = p.inv.findProductID(prod.getText());
							boolean flag = p.updateQuantity(prodID, distCentre.getText(), Integer.parseInt(quantity.getText()), admin.sessionID);
							if (flag){
								JOptionPane.showMessageDialog(null, "Product has been updated");
							}
							else{
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null, "Invalid Input");
						}
					}
			}
		}
	});

		// Method to check whether this city exists
		addWarehouse.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField city = new JTextField();
				Object[] message = { "City:", city };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (city.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse",
								JOptionPane.OK_CANCEL_OPTION);
					} else {
						try {
							p.addDistributionCenter(city.getText(), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New Warehouse added.(the warehouse may exist before added)");
						}catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}catch (CityDNEException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The city do not exist.");
						}

					}
				}
			}
		});
		
		salesReport.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				SalesReport s = new SalesReport(admin,p.inv);
			}
			
		});

		// Generate sales report method

		revalidate();
		addCategory.setVisible(true);
		addProduct.setVisible(true);
		salesReport.setVisible(true);
		addRoute.setVisible(true);
		maintainQuantity.setVisible(true);
		addWarehouse.setVisible(true);

		// private void mouseClicked(MouseEvent e){
		// for (JLabel image: tempProd){
		// if (e.getSource() == image){

		// }
		// }
		// }

	}
	
	public class SalesReport extends JFrame{
		private JLabel label;
		private JPanel panell;
		private Administrator admin;
		private Inventory inv;
		public SalesReport(Administrator admin, Inventory inv){
			this.admin = admin;
			this.inv = inv;
			panell = new JPanel();
			HashMap<Product, Integer> result = this.admin.salesReport(this.inv);
//			String message = "";
			label = new JLabel("======Sales Report===== \n");
			panell.add(label);
			for (HashMap.Entry<Product,Integer> cart : result.entrySet()){
				String message = "";
				message += "Product ID: " + cart.getKey().ID;
				message += "  Product Name: " + cart.getKey().description;
				message += "  Quantity: " + cart.getValue();
				message += "  Total: " + cart.getKey().price * cart.getValue();
  				message += "================== \n";
				label = new JLabel(message);
				panell.add(label);
			}
//		label = new JLabel(message);
	//		panell.add(label);
			add(panell);
			this.setSize(600, 400);
			this.setVisible(true);
		}
	}
	
	public class OrderReport extends JFrame{
		private JLabel lab;
		private JPanel pane2;
		private Shopper shopper;
		public OrderReport(Shopper shopper){
			this.shopper = shopper;
			pane2 = new JPanel();
			for (Invoice i : shopper.invoice){
				String result = "";
				result += "Invoice: " + i.iToString();
				lab = new JLabel(result);
				pane2.add(lab);
			}
			add(pane2);
			this.setSize(600, 400);
			this.setVisible(true);
			}

		}
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2016-08-05 12:00:27.350
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2016-08-05 12:00:27.351
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2016-08-05 12:00:27.431
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package finalproject;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.RootPaneContainer;

import com.sun.glass.events.MouseEvent;

import exercise2.EdgeExistsException;
import exercise2.Vertex;
import finalproject.ProjectV1.ShoppingCartItem;

/**
 * @author c6luoyil
 *
 */
public class Shop extends JFrame {
	private JMenuBar bar;
	private RegisterListener reglistener;
	private LoginListener loginlistener;
	private LogoutListener logoutlistener;
	private BrowseListener browselistener;
	private JMenu startMenu;
	private JButton browseButton;
	private JMenuItem registerItem, loginItem, logoutItem;
	private JLabel welcome;
	private static boolean loggedIn = false;
	private boolean loggedOut = true;
	private Map<Product, Integer> productList;
	private List<JLabel> tempProd;
	private Map<JButton, Product> tempButton;
	private static boolean inShoppingCart = false;
	private User cur_user;
	private static boolean validUser = false;
	private ArrayList<JLabel> labels;
	JButton shoppingcart;
	JButton checkout;
	JButton info;
	JButton history;
	JButton addCategory;
	JButton addProduct;
	JButton addWarehouse;
	JButton maintainQuantity;
	JButton addRoute;
	JButton salesReport;
	JButton refresh;
	

	private JPanel panel;
	// private JScrollPane panel;
	protected ProjectV1 p;
	protected int sessionID;

	public Shop() throws IOException {
		super("Shopping App");
		setContentPane(new JLabel(new ImageIcon("Products/bg.jpg")));
		setLayout(new FlowLayout());

		p = new ProjectV1();
		panel = new JPanel();

		// JScrollPane panel = new JScrollPane(this,
		// JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
		// JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		welcome = new JLabel();
		welcome.setFont(new Font("Sanserif", Font.ITALIC, 10));
		welcome.setEnabled(false);
		productList = new HashMap<Product, Integer>();
		tempButton = new HashMap<JButton, Product>();
		tempProd = new ArrayList<>();
		addProducts();

		bar = new JMenuBar();
		setJMenuBar(bar);
		startMenu = new JMenu("Start");
		bar.add(startMenu);

		registerItem = new JMenuItem("Register");
		// registerItem.setMnemonic('I');
		startMenu.add(registerItem);
		reglistener = new RegisterListener();
		registerItem.addActionListener(reglistener);

		loginItem = new JMenuItem("Log In");
		// loginItem.setMnemonic('I');
		startMenu.add(loginItem);
		loginlistener = new LoginListener();
		loginItem.addActionListener(loginlistener);

		logoutItem = new JMenuItem("Log Out");
		// logoutItem.setMnemonic(KeyEvent.VK_T);
		logoutItem.setEnabled(false);
		logoutlistener = new LogoutListener();
		logoutItem.addActionListener(logoutlistener);
		startMenu.add(logoutItem);

		browseButton = new JButton("Browse");
		bar.add(browseButton);
		browselistener = new BrowseListener();
		browseButton.addActionListener(browselistener);
		
		shoppingcart = new JButton("Shopping Cart");
		checkout = new JButton("CheckOut");
		info = new JButton("Personal information");
		history = new JButton("History of Purchase");
		bar.add(checkout);
		bar.add(shoppingcart);
		bar.add(info);
		bar.add(history);
		
		
		addCategory = new JButton("Add category");
		 addProduct = new JButton("Add Product");
		addWarehouse = new JButton("Add WareHouse");
		maintainQuantity = new JButton("Maintain Product Quantities");
		addRoute = new JButton("Add Shipping route");
		salesReport = new JButton("SalesReport");
		bar.add(addCategory);
		bar.add(addProduct);
		bar.add(salesReport);
		bar.add(addRoute);
		bar.add(maintainQuantity);
		bar.add(addWarehouse);

		labels = new ArrayList();
		this.setSize(600, 400);
		this.setVisible(true);
		
		addCategory.setVisible(false);
		addProduct.setVisible(false);
		salesReport.setVisible(false);
		addRoute.setVisible(false);
		maintainQuantity.setVisible(false);
		addWarehouse.setVisible(false);
		checkout.setVisible(false);
		shoppingcart.setVisible(false);
		info.setVisible(false);
		history.setVisible(false);
	}

	private void addProducts() {
		List<Product> products = p.inv.allProduct();
		for (Product p : products) {
			productList.put(p, p.quantity);
		}
		drawProductImage(productList);
	}

	// need to do
	private class LoginListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			try {
				User u = isAuthenticated();
				if (u != null) {
					loggedIn = true;
					loginItem.setEnabled(false);
					logoutItem.setEnabled(true);
					bar.add(add(Box.createHorizontalGlue()));
					bar.add(welcome);
					for (JLabel l : tempProd)
						l.setToolTipText("Add to shopping cart!");
					revalidate();
					if (u.type.equals("Shopper")) {
						ShopperFrame(u);
					} else {
						AdminFrame(u);
					}

				}
			} catch (NumberFormatException | OutOfStockException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private class LogoutListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			if (cur_user != null) {
				try {
					p.logout(cur_user.sessionID);
					cur_user = null;
					loginItem.setEnabled(true);
					logoutItem.setEnabled(false);
					addCategory.setVisible(false);
					addProduct.setVisible(false);
					salesReport.setVisible(false);
					addRoute.setVisible(false);
					maintainQuantity.setVisible(false);
					addWarehouse.setVisible(false);
					checkout.setVisible(false);
					shoppingcart.setVisible(false);
					info.setVisible(false);
					history.setVisible(false);
					
					refresh();
					validUser = false;
					validate();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	public void refresh() {
		panel.removeAll();
		welcome.setText("");
		addProducts();
		revalidate();
	}

	class RegisterListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			JTextField username = new JTextField();
			JTextField password = new JPasswordField();
			JTextField check = new JTextField();
			Object[] message = { "Username:", username, "Password:", password, "Are you Admin? (Yes or No)", check };
			int option = JOptionPane.showConfirmDialog(null, message, "Register", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (username.getText().equals("") || password.equals(""))
					JOptionPane.showMessageDialog(null, "Please input username and password.");
				if (check.getText().equals("Yes")) {
					try {
						boolean x = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								true);
						if (!x)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else if (check.getText().equals("No")) {
					try {
						boolean y = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								false);
						if (!y)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					JOptionPane.showMessageDialog(null, "Please input 'Yes' or 'No' for 'Are you Admin?'");
				}
			}
		}
	}

	public void drawProductImage(Map<Product, Integer> prodList) {
		//labels.clear();
		JLabel prod;
		//tempProd.clear();
		for (Map.Entry<Product, Integer> item : prodList.entrySet()) {
			Product p = item.getKey();
			ImageIcon prodImage = new ImageIcon(p.image);
			prod = new JLabel();
			JButton temp = new JButton();
			temp.setIcon(prodImage);
			temp.addActionListener(new ButtonAction());
			//labels.add(prod);
			// prod.setText("Quantity: ");
			// prod.setHorizontalTextPosition(JLabel.CENTER);
			// prod.setVerticalTextPosition(JLabel.BOTTOM);
			// prod.add(temp);
			panel.add(temp);
			add(panel);
			tempProd.add(prod);
			tempButton.put(temp, p);
		}
	}

	class BrowseListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			int min;
			int max;
			JTextField category = new JTextField();
			JTextField maxp = new JTextField();
			JTextField minp = new JTextField();
			Object[] message = { "Category:", category, "Min Price:", minp, "Max price:", maxp };
			int option = JOptionPane.showConfirmDialog(null, message, "Search", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (category.getText().equals("") || minp.equals("") || maxp.equals(""))
					JOptionPane.showMessageDialog(null, "Please fill in information!");
				try {
					min = Integer.parseInt(minp.getText());
					max = Integer.parseInt(maxp.getText());
					if (min >= 0) {
						tempProd.clear();
						ArrayList<Product> browsed = User.browseMerchandise(p.inv, category.getText(), max, min);
						Map<Product, Integer> prodList = new HashMap<Product, Integer>();
						for (Product p : browsed) {
							prodList.put(p, p.quantity);
						}
						panel.removeAll();
						drawProductImage(prodList);
						revalidate();
					}
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(null, "Please fill in Number for Price!");
					// not an integer!
				}
			}
		}
	}

	private User isAuthenticated() throws NumberFormatException, OutOfStockException, IOException {
		JTextField username = new JTextField();
		JTextField password = new JPasswordField();
		Object[] message = { "Username:", username, "Password:", password };
		// boolean result = true;
		User result = null;
		int sessionID;
		int option = JOptionPane.showConfirmDialog(null, message, "Login", JOptionPane.OK_CANCEL_OPTION);
		if (option == JOptionPane.OK_OPTION) {

			if (username.getText().equals("") || password.equals(""))
				JOptionPane.showMessageDialog(null, "Please input username and password.");

			sessionID = p.login(username.getText(), new String(((JPasswordField) password).getPassword()));
			if (sessionID != -1) {
				
				welcome.setText("Welcome, " + username.getText() + "!  ");
				this.sessionID = sessionID;
				result = User.allUser.get(sessionID);
			} else {
				JOptionPane.showMessageDialog(null, "Wrong Password/Username");
				// result = false;
			}
		}
		return result;
	}

	public boolean hasLoggedOut() {
		return loggedOut;
	}

	public void ShopperFrame(User u) {
		validUser = true;
		Shopper s = (Shopper) u;
		cur_user = s;
		checkout.setVisible(true);
		shoppingcart.setVisible(true);
		info.setVisible(true);
		history.setVisible(true);


		shoppingcart.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				Map<Product, Integer> cart = s.getShoppingCart();
				ShoppingCartFrame sf = new ShoppingCartFrame(cart, s);
				for (JLabel l : tempProd)
					l.setToolTipText("The item is in your shopping cart");

			}

		});

		history.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				OrderReport o = new OrderReport(s);
			}
			
		});

		checkout.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (s.address != null){
					if (p.customer.containsKey(s.address.ID)){
						try {
							if (s.cart.size()!=0){
								int orderID = p.checkout(s.address.ID, s.sessionID);
								if (orderID != 0){
									JOptionPane.showMessageDialog(null, "Thank you. You have checked out.");
									JOptionPane.showMessageDialog(null, Order.orderList.get(orderID).toString());
								}
								else
									JOptionPane.showMessageDialog(null, "Check out failed.");
							}
							else
								
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					else{
						JOptionPane.showMessageDialog(null, "Customer information not added");
					}
				}
				else{
					JOptionPane.showMessageDialog(null, "Customer information not added");
				}

			}

		});

		info.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JTextField name = new JTextField();
				JTextField city = new JTextField();
				JTextField street = new JTextField();
				Object[] message = { "Name:", name, "Street:", street, "City:", city, };
				int option = JOptionPane.showConfirmDialog(null, message, "Personal Information",
						JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (name.getText().equals("") || city.getText().equals("") || street.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Please fill in information!");
					} else {
						int success = p.addCustomer(name.getText(), city.getText(), street.getText(), sessionID);
						if (success == -1)
							JOptionPane.showMessageDialog(null, "Data already exists");
						else
							JOptionPane.showMessageDialog(null, "Thank You!");
					}
				}
			}

		});

	}

	public static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch (NumberFormatException e) {
			return false;
		} catch (NullPointerException e) {
			return false;
		}
		// only got here if we didn't return false
		return true;
	}

	class ButtonAction implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			JButton pressed = (JButton) e.getSource();
			Product p = null;
			for (Map.Entry<JButton, Product> item : tempButton.entrySet()) {
				if (pressed.equals(item.getKey())) {
					p = item.getValue();
				}
			}
			if (p != null) {
				if (validUser != true) {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
				} else {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
					String str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
					int option = JOptionPane.showConfirmDialog(null, str+"Amount added to Shopping Cart", "Add to Cart", JOptionPane.OK_CANCEL_OPTION);
					if (option == JOptionPane.OK_OPTION) {
						if (!isInteger(str)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
						boolean result = ((Shopper) cur_user).addtoCart(p, Integer.parseInt(str));
						if (!result) {
							JOptionPane.showMessageDialog(null,
									"The available amount is not sufficient for your order!");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
					}
				}

			}
		}

	}

	/**
	 * New frame just for the shopper's shopping cart
	 * 
	 * @author JLAI
	 *
	 */
	public class ShoppingCartFrame extends JFrame {
		JPanel pan;
		public Map<Product, Integer> cart;
		public Map<JButton, Product> ShoppingCarttempButton;
		public Shopper s;

		public ShoppingCartFrame(Map<Product, Integer> cart, Shopper s) {
			this.cart = cart;
			this.s = s;
			pan = new JPanel();
			ShoppingCarttempButton = new HashMap<JButton, Product>();
			drawProductImage2(cart);
			this.setSize(600, 400);
			this.setVisible(true);
		}

		public void drawProductImage2(Map<Product, Integer> prodList) {
			JLabel prod2;
			//tempProd.clear();
			for (HashMap.Entry<Product, Integer> item : prodList.entrySet()) {
				Product p = item.getKey();
				ImageIcon prodImage = new ImageIcon(p.image);
				JButton temp = new JButton();
				prod2 = new JLabel();
				temp.setIcon(prodImage);
				temp.addActionListener(new Action());
				prod2.add(temp);
				prod2.setToolTipText("Product: "+ p.description + " Price: " + p.price + " Available Quantity: " + p.quantity);
				// prod.setText("Quantity: ");
				// prod.setHorizontalTextPosition(JLabel.CENTER);
				// prod.setVerticalTextPosition(JLabel.BOTTOM);
				// prod.add(temp);
				pan.add(temp);
				add(pan);
				ShoppingCarttempButton.put(temp, p);		
			}
			revalidate();
		}

		class Action implements ActionListener {

			@Override
			public void actionPerformed(ActionEvent e) {
				JButton press = (JButton) e.getSource();
				Product p1 = null;
				for (Map.Entry<JButton, Product> item : ShoppingCarttempButton.entrySet()) {
					if (press.equals(item.getKey())) {
						p1 = item.getValue();
					}
				}
				if (p1 != null) {
					JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + cart.get(p1) +"\n");
					String st = JOptionPane.showInputDialog("Remove item or Update Quantity (Type R or U)");
					if (st.equals("R")) {
						s.removeFromCart(p1);
						JOptionPane.showMessageDialog(null, "Item has been removed from the cart");
					}
					else if (st.equals("U")) {
						st = JOptionPane.showInputDialog("Type in your desired Quantity");
						if (!isInteger(st)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							st = JOptionPane.showInputDialog("Type in your desired Quantity");
						}
						else{
							int num = Integer.parseInt(st);
							num = num - cart.get(p1);
							s.addtoCart(p1, num);
							JOptionPane.showMessageDialog(null, "Desired Quantity has been updated.");
							JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + num+ "\n");
						}
					} else {
						JOptionPane.showMessageDialog(null, "Wrong Input!!!");
						st = JOptionPane.showInputDialog("Remove Product or Update Quantity (Type R or U)");
					}
				}
			}
		}
	}

	public void AdminFrame(User u) {
		Administrator admin = (Administrator) u;
		cur_user = admin;
		validUser = false;

		addCategory.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField catName = new JTextField();
				Object[] message = { "Category name:", catName};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Category", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION){
					String result = catName.getText();
					try {
						int num = p.addCategory(result, admin.sessionID);
						if (num == -1){
							JOptionPane.showMessageDialog(null, "Category is already existed or the input is invalid.");
						}
						else
							JOptionPane.showMessageDialog(null, "New Category has been added.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		});

		addProduct.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prodname = new JTextField();
				JTextField category = new JTextField();
				JTextField price = new JTextField();
				JTextField imgpath = new JTextField();
				Object[] message = { "Product name:", prodname, "Category:", category, "Price:", price , "Image Path:", imgpath};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (category.getText().equals("") || prodname.getText().equals("") || price.getText().equals("") || imgpath.getText().equals("") 
							|| !isInteger(price.getText())) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
						}
					else{
						int result;
						try {
							int code = p.inv.findID(category.getText());
							if (code != -1) {
								result = p.addProduct(prodname.getText(), code, Double.parseDouble(price.getText()), admin.sessionID);}
							else { result = code; }
							if (result == -1){
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
							else{
								p.inv.findProduct(result).image = imgpath.getText();
								p.inventoryManager.writeFile(p.inv);
								JOptionPane.showMessageDialog(null, "Product has been added");
								refresh();
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
			}
			}
		});

		addRoute.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField cityA = new JTextField();
				JTextField cityB = new JTextField();
				JTextField distance = new JTextField();
				Object[] message = { "City A:", cityA, "City B:", cityB, "Distance:", distance };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (cityA.getText().equals("") || cityB.equals("") || distance.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							p.addRoute(cityA.getText(), cityB.getText(), Integer.parseInt(distance.getText()), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New route added.");
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (EdgeExistsException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The Route already existed.");
						}
					}
			}
		}
	});
		
		maintainQuantity.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prod = new JTextField();
				JTextField distCentre = new JTextField();
				JTextField quantity = new JTextField();
				Object[] message = { "Product Name", prod, "Distribution Centre:", distCentre, "Quantity", quantity };
				int option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (prod.getText().equals("") || distCentre.equals("") || quantity.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							int prodID = p.inv.findProductID(prod.getText());
							boolean flag = p.updateQuantity(prodID, distCentre.getText(), Integer.parseInt(quantity.getText()), admin.sessionID);
							if (flag){
								JOptionPane.showMessageDialog(null, "Product has been updated");
							}
							else{
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null, "Invalid Input");
						}
					}
			}
		}
	});

		// Method to check whether this city exists
		addWarehouse.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField city = new JTextField();
				Object[] message = { "City:", city };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (city.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse",
								JOptionPane.OK_CANCEL_OPTION);
					} else {
						try {
							p.addDistributionCenter(city.getText(), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New Warehouse added.(the warehouse may exist before added)");
						}catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}catch (CityDNEException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The city do not exist.");
						}

					}
				}
			}
		});
		
		salesReport.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				SalesReport s = new SalesReport(admin,p.inv);
			}
			
		});

		// Generate sales report method

		revalidate();
		addCategory.setVisible(true);
		addProduct.setVisible(true);
		salesReport.setVisible(true);
		addRoute.setVisible(true);
		maintainQuantity.setVisible(true);
		addWarehouse.setVisible(true);

		// private void mouseClicked(MouseEvent e){
		// for (JLabel image: tempProd){
		// if (e.getSource() == image){

		// }
		// }
		// }

	}
	
	public class SalesReport extends JFrame{
		private JLabel label;
		private JPanel panell;
		private Administrator admin;
		private Inventory inv;
		public SalesReport(Administrator admin, Inventory inv){
			this.admin = admin;
			this.inv = inv;
			panell = new JPanel();
			HashMap<Product, Integer> result = this.admin.salesReport(this.inv);
//			String message = "";
			label = new JLabel("======Sales Report===== \n");
			panell.add(label);
			for (HashMap.Entry<Product,Integer> cart : result.entrySet()){
				String message = "";
				message += "Product ID: " + cart.getKey().ID;
				message += "  Product Name: " + cart.getKey().description;
				message += "  Quantity: " + cart.getValue();
				message += "  Total: " + cart.getKey().price * cart.getValue();
  				message += "================== \n";
				label = new JLabel(message);
				panell.add(label);
			}
//		label = new JLabel(message);
	//		panell.add(label);
			add(panell);
			this.setSize(600, 400);
			this.setVisible(true);
		}
	}
	
	public class OrderReport extends JFrame{
		private JLabel lab;
		private JPanel pane2;
		private Shopper shopper;
		public OrderReport(Shopper shopper){
			this.shopper = shopper;
			pane2 = new JPanel();
			for (Invoice i : shopper.invoice){
				String result = "";
				result += "Invoice: " + i.iToString();
				lab = new JLabel(result);
				pane2.add(lab);
			}
			add(pane2);
			this.setSize(600, 400);
			this.setVisible(true);
			}

		}
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:450)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:377)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:331)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction$1.run(ClipboardOperationAction.java:279)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:277)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:473)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:122)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:90)
	at sun.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:252)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:234)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:132)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:152)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:493)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:486)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:210)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:286)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:507)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:558)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:378)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.access$0(KeyBindingDispatcher.java:324)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:86)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1266)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1112)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1137)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1122)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1164)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1160)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1581)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4795)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:343)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4676)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:339)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5050)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2549)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3767)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:694)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:606)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)

!ENTRY org.eclipse.jdt.ui 4 2 2016-08-05 12:00:27.433
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:450)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:377)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:331)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction$1.run(ClipboardOperationAction.java:279)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:277)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:473)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:122)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:90)
	at sun.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:252)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:234)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:132)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:152)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:493)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:486)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:210)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:286)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:507)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:558)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:378)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.access$0(KeyBindingDispatcher.java:324)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:86)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1266)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1112)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1137)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1122)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1164)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1160)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1581)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4795)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:343)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4676)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:339)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5050)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2549)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3767)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:694)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:606)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)

!ENTRY org.eclipse.jdt.ui 4 0 2016-08-05 12:00:27.434
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:450)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:377)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:331)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction$1.run(ClipboardOperationAction.java:279)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:277)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:473)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:122)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:90)
	at sun.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:252)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:234)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:132)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:152)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:493)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:486)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:210)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:286)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:507)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:558)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:378)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.access$0(KeyBindingDispatcher.java:324)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:86)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1266)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1112)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1137)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1122)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1164)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1160)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1581)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4795)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:343)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4676)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:339)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5050)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2549)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3767)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:694)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:606)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:139)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)

!ENTRY org.eclipse.jdt.core 4 4 2016-08-05 12:00:27.460
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package finalproject;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.RootPaneContainer;

import com.sun.glass.events.MouseEvent;

import exercise2.EdgeExistsException;
import exercise2.Vertex;
import finalproject.ProjectV1.ShoppingCartItem;

/**
 * @author c6luoyil
 *
 */
public class Shop extends JFrame {
	private JMenuBar bar;
	private RegisterListener reglistener;
	private LoginListener loginlistener;
	private LogoutListener logoutlistener;
	private BrowseListener browselistener;
	private JMenu startMenu;
	private JButton browseButton;
	private JMenuItem registerItem, loginItem, logoutItem;
	private JLabel welcome;
	private static boolean loggedIn = false;
	private boolean loggedOut = true;
	private Map<Product, Integer> productList;
	private List<JLabel> tempProd;
	private Map<JButton, Product> tempButton;
	private static boolean inShoppingCart = false;
	private User cur_user;
	private static boolean validUser = false;
	private ArrayList<JLabel> labels;
	JButton shoppingcart;
	JButton checkout;
	JButton info;
	JButton history;
	JButton addCategory;
	JButton addProduct;
	JButton addWarehouse;
	JButton maintainQuantity;
	JButton addRoute;
	JButton salesReport;
	JButton refresh;
	

	private JPanel panel;
	// private JScrollPane panel;
	protected ProjectV1 p;
	protected int sessionID;

	public Shop() throws IOException {
		super("Shopping App");
		setContentPane(new JLabel(new ImageIcon("Products/bg.jpg")));
		setLayout(new FlowLayout());

		p = new ProjectV1();
		panel = new JPanel();

		// JScrollPane panel = new JScrollPane(this,
		// JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
		// JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		welcome = new JLabel();
		welcome.setFont(new Font("Sanserif", Font.ITALIC, 10));
		welcome.setEnabled(false);
		productList = new HashMap<Product, Integer>();
		tempButton = new HashMap<JButton, Product>();
		tempProd = new ArrayList<>();
		addProducts();

		bar = new JMenuBar();
		setJMenuBar(bar);
		startMenu = new JMenu("Start");
		bar.add(startMenu);

		registerItem = new JMenuItem("Register");
		// registerItem.setMnemonic('I');
		startMenu.add(registerItem);
		reglistener = new RegisterListener();
		registerItem.addActionListener(reglistener);

		loginItem = new JMenuItem("Log In");
		// loginItem.setMnemonic('I');
		startMenu.add(loginItem);
		loginlistener = new LoginListener();
		loginItem.addActionListener(loginlistener);

		logoutItem = new JMenuItem("Log Out");
		// logoutItem.setMnemonic(KeyEvent.VK_T);
		logoutItem.setEnabled(false);
		logoutlistener = new LogoutListener();
		logoutItem.addActionListener(logoutlistener);
		startMenu.add(logoutItem);

		browseButton = new JButton("Browse");
		bar.add(browseButton);
		browselistener = new BrowseListener();
		browseButton.addActionListener(browselistener);
		
		shoppingcart = new JButton("Shopping Cart");
		checkout = new JButton("CheckOut");
		info = new JButton("Personal information");
		history = new JButton("History of Purchase");
		bar.add(checkout);
		bar.add(shoppingcart);
		bar.add(info);
		bar.add(history);
		
		
		addCategory = new JButton("Add category");
		 addProduct = new JButton("Add Product");
		addWarehouse = new JButton("Add WareHouse");
		maintainQuantity = new JButton("Maintain Product Quantities");
		addRoute = new JButton("Add Shipping route");
		salesReport = new JButton("SalesReport");
		bar.add(addCategory);
		bar.add(addProduct);
		bar.add(salesReport);
		bar.add(addRoute);
		bar.add(maintainQuantity);
		bar.add(addWarehouse);

		labels = new ArrayList();
		this.setSize(600, 400);
		this.setVisible(true);
		
		addCategory.setVisible(false);
		addProduct.setVisible(false);
		salesReport.setVisible(false);
		addRoute.setVisible(false);
		maintainQuantity.setVisible(false);
		addWarehouse.setVisible(false);
		checkout.setVisible(false);
		shoppingcart.setVisible(false);
		info.setVisible(false);
		history.setVisible(false);
	}

	private void addProducts() {
		List<Product> products = p.inv.allProduct();
		for (Product p : products) {
			productList.put(p, p.quantity);
		}
		drawProductImage(productList);
	}

	// need to do
	private class LoginListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			try {
				User u = isAuthenticated();
				if (u != null) {
					loggedIn = true;
					loginItem.setEnabled(false);
					logoutItem.setEnabled(true);
					bar.add(add(Box.createHorizontalGlue()));
					bar.add(welcome);
					for (JLabel l : tempProd)
						l.setToolTipText("Add to shopping cart!");
					revalidate();
					if (u.type.equals("Shopper")) {
						ShopperFrame(u);
					} else {
						AdminFrame(u);
					}

				}
			} catch (NumberFormatException | OutOfStockException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private class LogoutListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			if (cur_user != null) {
				try {
					p.logout(cur_user.sessionID);
					cur_user = null;
					loginItem.setEnabled(true);
					logoutItem.setEnabled(false);
					addCategory.setVisible(false);
					addProduct.setVisible(false);
					salesReport.setVisible(false);
					addRoute.setVisible(false);
					maintainQuantity.setVisible(false);
					addWarehouse.setVisible(false);
					checkout.setVisible(false);
					shoppingcart.setVisible(false);
					info.setVisible(false);
					history.setVisible(false);
					
					refresh();
					validUser = false;
					validate();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	public void refresh() {
		panel.removeAll();
		welcome.setText("");
		addProducts();
		revalidate();
	}

	class RegisterListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			JTextField username = new JTextField();
			JTextField password = new JPasswordField();
			JTextField check = new JTextField();
			Object[] message = { "Username:", username, "Password:", password, "Are you Admin? (Yes or No)", check };
			int option = JOptionPane.showConfirmDialog(null, message, "Register", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (username.getText().equals("") || password.equals(""))
					JOptionPane.showMessageDialog(null, "Please input username and password.");
				if (check.getText().equals("Yes")) {
					try {
						boolean x = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								true);
						if (!x)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else if (check.getText().equals("No")) {
					try {
						boolean y = p.addUser(username.getText(), new String(((JPasswordField) password).getPassword()),
								false);
						if (!y)
							JOptionPane.showMessageDialog(null, "username taken.");
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					JOptionPane.showMessageDialog(null, "Please input 'Yes' or 'No' for 'Are you Admin?'");
				}
			}
		}
	}

	public void drawProductImage(Map<Product, Integer> prodList) {
		//labels.clear();
		JLabel prod;
		//tempProd.clear();
		for (Map.Entry<Product, Integer> item : prodList.entrySet()) {
			Product p = item.getKey();
			ImageIcon prodImage = new ImageIcon(p.image);
			prod = new JLabel();
			JButton temp = new JButton();
			temp.setIcon(prodImage);
			temp.addActionListener(new ButtonAction());
			//labels.add(prod);
			// prod.setText("Quantity: ");
			// prod.setHorizontalTextPosition(JLabel.CENTER);
			// prod.setVerticalTextPosition(JLabel.BOTTOM);
			// prod.add(temp);
			panel.add(temp);
			add(panel);
			tempProd.add(prod);
			tempButton.put(temp, p);
		}
	}

	class BrowseListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			int min;
			int max;
			JTextField category = new JTextField();
			JTextField maxp = new JTextField();
			JTextField minp = new JTextField();
			Object[] message = { "Category:", category, "Min Price:", minp, "Max price:", maxp };
			int option = JOptionPane.showConfirmDialog(null, message, "Search", JOptionPane.OK_CANCEL_OPTION);
			if (option == JOptionPane.OK_OPTION) {
				if (category.getText().equals("") || minp.equals("") || maxp.equals(""))
					JOptionPane.showMessageDialog(null, "Please fill in information!");
				try {
					min = Integer.parseInt(minp.getText());
					max = Integer.parseInt(maxp.getText());
					if (min >= 0) {
						tempProd.clear();
						ArrayList<Product> browsed = User.browseMerchandise(p.inv, category.getText(), max, min);
						Map<Product, Integer> prodList = new HashMap<Product, Integer>();
						for (Product p : browsed) {
							prodList.put(p, p.quantity);
						}
						panel.removeAll();
						drawProductImage(prodList);
						revalidate();
					}
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(null, "Please fill in Number for Price!");
					// not an integer!
				}
			}
		}
	}

	private User isAuthenticated() throws NumberFormatException, OutOfStockException, IOException {
		JTextField username = new JTextField();
		JTextField password = new JPasswordField();
		Object[] message = { "Username:", username, "Password:", password };
		// boolean result = true;
		User result = null;
		int sessionID;
		int option = JOptionPane.showConfirmDialog(null, message, "Login", JOptionPane.OK_CANCEL_OPTION);
		if (option == JOptionPane.OK_OPTION) {

			if (username.getText().equals("") || password.equals(""))
				JOptionPane.showMessageDialog(null, "Please input username and password.");

			sessionID = p.login(username.getText(), new String(((JPasswordField) password).getPassword()));
			if (sessionID != -1) {
				
				welcome.setText("Welcome, " + username.getText() + "!  ");
				this.sessionID = sessionID;
				result = User.allUser.get(sessionID);
			} else {
				JOptionPane.showMessageDialog(null, "Wrong Password/Username");
				// result = false;
			}
		}
		return result;
	}

	public boolean hasLoggedOut() {
		return loggedOut;
	}

	public void ShopperFrame(User u) {
		validUser = true;
		Shopper s = (Shopper) u;
		cur_user = s;
		checkout.setVisible(true);
		shoppingcart.setVisible(true);
		info.setVisible(true);
		history.setVisible(true);


		shoppingcart.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				Map<Product, Integer> cart = s.getShoppingCart();
				ShoppingCartFrame sf = new ShoppingCartFrame(cart, s);
				for (JLabel l : tempProd)
					l.setToolTipText("The item is in your shopping cart");

			}

		});

		history.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				OrderReport o = new OrderReport(s);
			}
			
		});

		checkout.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (s.address != null){
					if (p.customer.containsKey(s.address.ID)){
						try {
							if (s.cart.size()!=0){
								int orderID = p.checkout(s.address.ID, s.sessionID);
								if (orderID != 0){
									JOptionPane.showMessageDialog(null, "Thank you. You have checked out.");
									JOptionPane.showMessageDialog(null, Order.orderList.get(orderID).toString());
								}
								else
									JOptionPane.showMessageDialog(null, "Check out failed.");
							}
							else
								
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					else{
						JOptionPane.showMessageDialog(null, "Customer information not added");
					}
				}
				else{
					JOptionPane.showMessageDialog(null, "Customer information not added");
				}

			}

		});

		info.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JTextField name = new JTextField();
				JTextField city = new JTextField();
				JTextField street = new JTextField();
				Object[] message = { "Name:", name, "Street:", street, "City:", city, };
				int option = JOptionPane.showConfirmDialog(null, message, "Personal Information",
						JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (name.getText().equals("") || city.getText().equals("") || street.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Please fill in information!");
					} else {
						int success = p.addCustomer(name.getText(), city.getText(), street.getText(), sessionID);
						if (success == -1)
							JOptionPane.showMessageDialog(null, "Data already exists");
						else
							JOptionPane.showMessageDialog(null, "Thank You!");
					}
				}
			}

		});

	}

	public static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch (NumberFormatException e) {
			return false;
		} catch (NullPointerException e) {
			return false;
		}
		// only got here if we didn't return false
		return true;
	}

	class ButtonAction implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			JButton pressed = (JButton) e.getSource();
			Product p = null;
			for (Map.Entry<JButton, Product> item : tempButton.entrySet()) {
				if (pressed.equals(item.getKey())) {
					p = item.getValue();
				}
			}
			if (p != null) {
				if (validUser != true) {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
				} else {
					JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
					String str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
					int option = JOptionPane.showConfirmDialog(null, str+"Amount added to Shopping Cart", "Add to Cart", JOptionPane.OK_CANCEL_OPTION);
					if (option == JOptionPane.OK_OPTION) {
						if (!isInteger(str)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							JOptionPane.showMessageDialog(null, "Product: "+ p.description +"\n" + "Price: " + p.price + "\n" +" Available Quantity: " + p.quantity +"\n");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
						boolean result = ((Shopper) cur_user).addtoCart(p, Integer.parseInt(str));
						if (!result) {
							JOptionPane.showMessageDialog(null,
									"The available amount is not sufficient for your order!");
							str = JOptionPane.showInputDialog("Type in the amount you wish to add to cart");
						}
					}
				}

			}
		}

	}

	/**
	 * New frame just for the shopper's shopping cart
	 * 
	 * @author JLAI
	 *
	 */
	public class ShoppingCartFrame extends JFrame {
		JPanel pan;
		public Map<Product, Integer> cart;
		public Map<JButton, Product> ShoppingCarttempButton;
		public Shopper s;

		public ShoppingCartFrame(Map<Product, Integer> cart, Shopper s) {
			this.cart = cart;
			this.s = s;
			pan = new JPanel();
			ShoppingCarttempButton = new HashMap<JButton, Product>();
			drawProductImage2(cart);
			this.setSize(600, 400);
			this.setVisible(true);
		}

		public void drawProductImage2(Map<Product, Integer> prodList) {
			JLabel prod2;
			//tempProd.clear();
			for (HashMap.Entry<Product, Integer> item : prodList.entrySet()) {
				Product p = item.getKey();
				ImageIcon prodImage = new ImageIcon(p.image);
				JButton temp = new JButton();
				prod2 = new JLabel();
				temp.setIcon(prodImage);
				temp.addActionListener(new Action());
				prod2.add(temp);
				prod2.setToolTipText("Product: "+ p.description + " Price: " + p.price + " Available Quantity: " + p.quantity);
				// prod.setText("Quantity: ");
				// prod.setHorizontalTextPosition(JLabel.CENTER);
				// prod.setVerticalTextPosition(JLabel.BOTTOM);
				// prod.add(temp);
				pan.add(temp);
				add(pan);
				ShoppingCarttempButton.put(temp, p);		
			}
			revalidate();
		}

		class Action implements ActionListener {

			@Override
			public void actionPerformed(ActionEvent e) {
				JButton press = (JButton) e.getSource();
				Product p1 = null;
				for (Map.Entry<JButton, Product> item : ShoppingCarttempButton.entrySet()) {
					if (press.equals(item.getKey())) {
						p1 = item.getValue();
					}
				}
				if (p1 != null) {
					JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + cart.get(p1) +"\n");
					String st = JOptionPane.showInputDialog("Remove item or Update Quantity (Type R or U)");
					if (st.equals("R")) {
						s.removeFromCart(p1);
						JOptionPane.showMessageDialog(null, "Item has been removed from the cart");
					}
					else if (st.equals("U")) {
						st = JOptionPane.showInputDialog("Type in your desired Quantity");
						if (!isInteger(st)) {
							JOptionPane.showMessageDialog(null, "Wrong Input!!!");
							st = JOptionPane.showInputDialog("Type in your desired Quantity");
						}
						else{
							int num = Integer.parseInt(st);
							num = num - cart.get(p1);
							s.addtoCart(p1, num);
							JOptionPane.showMessageDialog(null, "Desired Quantity has been updated.");
							JOptionPane.showMessageDialog(null, "Product: "+ p1.description +"\n" + "Price: " + p1.price + "\n" +"Quantity: " + num+ "\n");
						}
					} else {
						JOptionPane.showMessageDialog(null, "Wrong Input!!!");
						st = JOptionPane.showInputDialog("Remove Product or Update Quantity (Type R or U)");
					}
				}
			}
		}
	}

	public void AdminFrame(User u) {
		Administrator admin = (Administrator) u;
		cur_user = admin;
		validUser = false;

		addCategory.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField catName = new JTextField();
				Object[] message = { "Category name:", catName};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Category", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION){
					String result = catName.getText();
					try {
						int num = p.addCategory(result, admin.sessionID);
						if (num == -1){
							JOptionPane.showMessageDialog(null, "Category is already existed or the input is invalid.");
						}
						else
							JOptionPane.showMessageDialog(null, "New Category has been added.");
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		});

		addProduct.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prodname = new JTextField();
				JTextField category = new JTextField();
				JTextField price = new JTextField();
				JTextField imgpath = new JTextField();
				Object[] message = { "Product name:", prodname, "Category:", category, "Price:", price , "Image Path:", imgpath};
				int option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (category.getText().equals("") || prodname.getText().equals("") || price.getText().equals("") || imgpath.getText().equals("") 
							|| !isInteger(price.getText())) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Product", JOptionPane.OK_CANCEL_OPTION);
						}
					else{
						int result;
						try {
							int code = p.inv.findID(category.getText());
							if (code != -1) {
								result = p.addProduct(prodname.getText(), code, Double.parseDouble(price.getText()), admin.sessionID);}
							else { result = code; }
							if (result == -1){
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
							else{
								p.inv.findProduct(result).image = imgpath.getText();
								p.inventoryManager.writeFile(p.inv);
								JOptionPane.showMessageDialog(null, "Product has been added");
								refresh();
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
			}
			}
		});

		addRoute.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField cityA = new JTextField();
				JTextField cityB = new JTextField();
				JTextField distance = new JTextField();
				Object[] message = { "City A:", cityA, "City B:", cityB, "Distance:", distance };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (cityA.getText().equals("") || cityB.equals("") || distance.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Route", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							p.addRoute(cityA.getText(), cityB.getText(), Integer.parseInt(distance.getText()), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New route added.");
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (EdgeExistsException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The Route already existed.");
						}
					}
			}
		}
	});
		
		maintainQuantity.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField prod = new JTextField();
				JTextField distCentre = new JTextField();
				JTextField quantity = new JTextField();
				Object[] message = { "Product Name", prod, "Distribution Centre:", distCentre, "Quantity", quantity };
				int option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (prod.getText().equals("") || distCentre.equals("") || quantity.equals("")) {
						JOptionPane.showMessageDialog(null,"Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Maintain Product Quantities", JOptionPane.OK_CANCEL_OPTION);
					}
					else{
						try {
							int prodID = p.inv.findProductID(prod.getText());
							boolean flag = p.updateQuantity(prodID, distCentre.getText(), Integer.parseInt(quantity.getText()), admin.sessionID);
							if (flag){
								JOptionPane.showMessageDialog(null, "Product has been updated");
							}
							else{
								JOptionPane.showMessageDialog(null, "Invalid Input");
							}
						} catch (NumberFormatException | IOException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null, "Invalid Input");
						}
					}
			}
		}
	});

		// Method to check whether this city exists
		addWarehouse.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				JTextField city = new JTextField();
				Object[] message = { "City:", city };
				int option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse", JOptionPane.OK_CANCEL_OPTION);
				if (option == JOptionPane.OK_OPTION) {
					if (city.getText().equals("")) {
						JOptionPane.showMessageDialog(null, "Invalid Input");
						option = JOptionPane.showConfirmDialog(null, message, "Add Warehouse",
								JOptionPane.OK_CANCEL_OPTION);
					} else {
						try {
							p.addDistributionCenter(city.getText(), admin.sessionID);
							JOptionPane.showMessageDialog(null,"New Warehouse added.(the warehouse may exist before added)");
						}catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}catch (CityDNEException e) {
							// TODO Auto-generated catch block
							JOptionPane.showMessageDialog(null,"The city do not exist.");
						}

					}
				}
			}
		});
		
		salesReport.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				SalesReport s = new SalesReport(admin,p.inv);
			}
			
		});

		// Generate sales report method

		revalidate();
		addCategory.setVisible(true);
		addProduct.setVisible(true);
		salesReport.setVisible(true);
		addRoute.setVisible(true);
		maintainQuantity.setVisible(true);
		addWarehouse.setVisible(true);

		// private void mouseClicked(MouseEvent e){
		// for (JLabel image: tempProd){
		// if (e.getSource() == image){

		// }
		// }
		// }

	}
	
	public class SalesReport extends JFrame{
		private JLabel label;
		private JPanel panell;
		private Administrator admin;
		private Inventory inv;
		public SalesReport(Administrator admin, Inventory inv){
			this.admin = admin;
			this.inv = inv;
			panell = new JPanel();
			HashMap<Product, Integer> result = this.admin.salesReport(this.inv);
//			String message = "";
			label = new JLabel("======Sales Report===== \n");
			panell.add(label);
			for (HashMap.Entry<Product,Integer> cart : result.entrySet()){
				String message = "";
				message += "Product ID: " + cart.getKey().ID;
				message += "  Product Name: " + cart.getKey().description;
				message += "  Quantity: " + cart.getValue();
				message += "  Total: " + cart.getKey().price * cart.getValue();
  				message += "================== \n";
				label = new JLabel(message);
				panell.add(label);
			}
//		label = new JLabel(message);
	//		panell.add(label);
			add(panell);
			this.setSize(600, 400);
			this.setVisible(true);
		}
	}
	
	public class OrderReport extends JFrame{
		private JLabel lab;
		private JPanel pane2;
		private Shopper shopper;
		public OrderReport(Shopper shopper){
			this.shopper = shopper;
			pane2 = new JPanel();
			for (Invoice i : shopper.invoice){
				String result = "";
				result += "Invoice: " + i.iToString();
				lab = new JLabel(result);
				pane2.add(lab);
			}
			add(pane2);
			this.setSize(600, 400);
			this.setVisible(true);
			}

		}
	}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:461)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.recommenders.rcp.utils.JdtUtils.findAstNodeFromEditorSelection(JdtUtils.java:663)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.handleSelectionInEditor(JavaElementSelectionService.java:110)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.access$1(JavaElementSelectionService.java:105)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService$1.run(JavaElementSelectionService.java:82)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

!ENTRY org.eclipse.jdt.ui 4 2 2016-08-05 12:00:27.461
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:461)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.recommenders.rcp.utils.JdtUtils.findAstNodeFromEditorSelection(JdtUtils.java:663)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.handleSelectionInEditor(JavaElementSelectionService.java:110)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.access$1(JavaElementSelectionService.java:105)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService$1.run(JavaElementSelectionService.java:82)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)

!ENTRY org.eclipse.jdt.ui 4 0 2016-08-05 12:00:27.462
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2845)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:604)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:334)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2511)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1696)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2751)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:635)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:195)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2958)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1374)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1216)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:535)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:528)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:471)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:461)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.recommenders.rcp.utils.JdtUtils.findAstNodeFromEditorSelection(JdtUtils.java:663)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.handleSelectionInEditor(JavaElementSelectionService.java:110)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService.access$1(JavaElementSelectionService.java:105)
	at org.eclipse.recommenders.internal.rcp.JavaElementSelectionService$1.run(JavaElementSelectionService.java:82)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
!SESSION 2016-08-11 12:47:40.680 -----------------------------------------------
eclipse.buildId=4.5.2.M20160212-1500
java.version=1.8.0_92
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2016-08-11 12:47:55.239
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Leo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2017-05-09 16:22:35.447 -----------------------------------------------
eclipse.buildId=4.5.2.M20160212-1500
java.version=1.8.0_92
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-05-09 16:23:19.445
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Leo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.epp.logging.aeri.ide 2 16 2017-05-09 16:23:29.715
!MESSAGE Server ‘org.eclipse.epp.logging.aeri.ide.server’ failed with exception: dev.eclipse.org. ; version: 1.100.0.v20160217-0435
!STACK 0
java.net.UnknownHostException: dev.eclipse.org
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	at java.net.InetAddress$2.lookupAllHostAddr(Unknown Source)
	at java.net.InetAddress.getAddressesFromNameService(Unknown Source)
	at java.net.InetAddress.getAllByName0(Unknown Source)
	at java.net.InetAddress.getAllByName(Unknown Source)
	at java.net.InetAddress.getAllByName(Unknown Source)
	at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:44)
	at org.apache.http.impl.conn.HttpClientConnectionOperator.connect(HttpClientConnectionOperator.java:102)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:319)
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:363)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:219)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:195)
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:86)
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:108)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
	at org.apache.http.client.fluent.Executor.execute(Executor.java:206)
	at org.eclipse.epp.internal.logging.aeri.ide.server.mars.IO.request(IO.java:205)
	at org.eclipse.epp.internal.logging.aeri.ide.server.mars.IO.refreshConfiguration(IO.java:68)
	at org.eclipse.epp.internal.logging.aeri.ide.server.mars.ServerConnection.startUp(ServerConnection.java:101)
	at com.google.common.util.concurrent.AbstractIdleService$2$1.run(AbstractIdleService.java:54)
	at com.google.common.util.concurrent.Callables$3.run(Callables.java:93)
	at java.lang.Thread.run(Unknown Source)
!SESSION 2017-05-10 13:56:12.838 -----------------------------------------------
eclipse.buildId=4.5.2.M20160212-1500
java.version=1.8.0_92
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.egit.ui 2 0 2017-05-10 13:56:24.836
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Leo'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
